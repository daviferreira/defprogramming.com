[
  {
    "body": "Code smells.",
    "uuid": "ff76ac536cff",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Martin Fowler"],
    "authors_uuid": ["721333935c91"],
    "tags_uuid": ["2806ae712337", "21d9e61717db", "bd67f2b3cd5c"],
    "tags": ["refactoring", "debugging", "bugs"]
  },
  {
    "body": "Don't live with broken windows.",
    "uuid": "f92f850dbf1a",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Andy Hunt", "Dave Thomas"],
    "authors_uuid": ["187171c0d7c4", "493bda434c28"],
    "tags_uuid": ["2806ae712337"],
    "tags": ["refactoring"]
  },
  {
    "body": "Functions should do one thing. They should do it well. They should do it only.",
    "uuid": "51967093b739",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["f1ff3769767f"],
    "tags": ["functions"]
  },
  {
    "body": "The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that.",
    "uuid": "198841f270cd",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["f1ff3769767f"],
    "tags": ["functions"]
  },
  {
    "body": "The ideal numbers of arguments for a function is zero (niladic). Next comes one (monadic), followed closely by two (dyadic). Three arguments (triadic) should be avoided where possible. More than three (polyadic) requires very special justification ‐ and then shouldn't be used anyway.",
    "uuid": "34ec63a93be0",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["f1ff3769767f"],
    "tags": ["functions"]
  },
  {
    "body": "DRY ‐ Don't Repeat Yourself ‐ Every piece of knowledge must have a single, unambiguous, athoritative representation within a system.",
    "uuid": "048396df766a",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Dave Thomas", "Andy Hunt"],
    "authors_uuid": ["493bda434c28", "187171c0d7c4"],
    "tags_uuid": ["1660e265686e", "2806ae712337"],
    "tags": ["dry", "refactoring"]
  },
  {
    "body": "Be careful to preserve the orthogonality of your system as you introduce third-party toolkits and libraries. Choose your technologies wisely.",
    "uuid": "8275d84192d7",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Dave Thomas", "Andy Hunt"],
    "authors_uuid": ["493bda434c28", "187171c0d7c4"],
    "tags_uuid": ["1660e265686e"],
    "tags": ["dry"]
  },
  {
    "body": "Don't comment bad code ‐ rewrite it.",
    "uuid": "c2911efc5579",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["P. J. Plaugher", "Brian W. Kernighan"],
    "authors_uuid": ["e773f0e8944d", "0086884ef4b1"],
    "tags_uuid": ["8f1619347921", "2806ae712337"],
    "tags": ["commenting", "refactoring"]
  },
  {
    "body": "Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build, and test.",
    "uuid": "392885c212d2",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Ray Ozzie"],
    "authors_uuid": ["1a71a13bdcd3"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The Three Laws of TDD:\n\n  1) You may not write production code until you have written a failing unit test.\n  2) You may not write more of a unit test than is sufficient to fail, and not compiling is failing.\n  3) You may not write more production code than is sufficient to pass the currently failing test.",
    "uuid": "ff88d66927b2",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["433a3a423cd9", "e8e63fda46b9"],
    "tags": ["testing", "tdd"]
  },
  {
    "body": "Objects are abstractions of processing. Threads are abstractions of schedule.",
    "uuid": "37232a2e1ca9",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["James O. Coplien"],
    "authors_uuid": ["aa156a9f3b23"],
    "tags_uuid": ["0c73ea729479", "3e7aeeca901a", "93a30957024f"],
    "tags": ["objects", "oop", "threads"]
  },
  {
    "body": "Controlling complexity is the essence of computer programming.",
    "uuid": "7dc622398100",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Brian W. Kernighan"],
    "authors_uuid": ["0086884ef4b1"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.",
    "uuid": "698ccf154674",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["C. A. R. Hoare"],
    "authors_uuid": ["a6bd6d72ec53"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "There's an old story about the person who wished his computer were as easy to use as his telephone.  That wish has come true, since I no longer know how to use my telephone.",
    "uuid": "350c559a31c0",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Bjarne Stroustrup"],
    "authors_uuid": ["4e82766e1971"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.",
    "uuid": "b8046621e41c",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Larry Wall"],
    "authors_uuid": ["efd5a93782e9"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "That's the thing about people who think they hate computers.  What they really hate is lousy programmers.",
    "uuid": "1bc972219175",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Larry Niven"],
    "authors_uuid": ["1e66a8a52f8e"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "To iterate is human, to recurse divine.",
    "uuid": "7e316c1310dc",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["L. Peter Deutsch"],
    "authors_uuid": ["c3fe083d2440"],
    "tags_uuid": ["f1ff3769767f"],
    "tags": ["functions"]
  },
  {
    "body": "Walking on water and developing software from a specification are easy if both are frozen.",
    "uuid": "a3d324f184bc",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Edward V. Berard"],
    "authors_uuid": ["a7603f3a3807"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.",
    "uuid": "e9fa269c7378",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Tom Cargill"],
    "authors_uuid": ["052ba7fe0d6d"],
    "tags_uuid": ["2e471af7f345"],
    "tags": ["estimating"]
  },
  {
    "body": "If you want to set off and go develop some grand new thing, you don't need millions of dollars of capitalization. You need enough pizza and Diet Coke to stick in your refrigerator, a cheap PC to work on and the dedication to go through with it.",
    "uuid": "22352f0cbeb7",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["John Carmack"],
    "authors_uuid": ["aaebabb8c61b"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Some people, when confronted with a problem, think &ldquo;I know, I’ll use regular expressions.&rdquo; Now they have two problems.",
    "uuid": "f4eb3f53b001",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Jamie Zawinski"],
    "authors_uuid": ["5b88df92a025"],
    "tags_uuid": ["bf80fee376b0"],
    "tags": ["regexp"]
  },
  {
    "body": "There are only two kinds of languages: the ones people complain about and the ones nobody uses.",
    "uuid": "152ecdf35fa2",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Bjarne Stroustrup"],
    "authors_uuid": ["4e82766e1971"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "It works on my machine.",
    "uuid": "7dd865763eb9",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["2464e5ee4186"],
    "tags": ["deploying"]
  },
  {
    "body": "If debugging is the process of removing software bugs, then programming must be the process of putting them in.",
    "uuid": "4720c7fba136",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "Refuctoring &mdash; the process of taking a well-designed piece of code and, through a series of small, reversible changes, making it completely unmaintainable by anyone except yourself.",
    "uuid": "cec3d8414a96",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Jason Gorman"],
    "authors_uuid": ["1cbf19d62ce5"],
    "tags_uuid": ["2806ae712337"],
    "tags": ["refactoring"]
  },
  {
    "body": "It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.",
    "uuid": "2b0a58fa34ee",
    "publish_date": "2011-07-04 16:43:52",
    "authors": ["Nathaniel Borenstein"],
    "authors_uuid": ["0063dd7627f8"],
    "tags_uuid": ["26400021f363", "f1ff3769767f"],
    "tags": ["naming", "functions"]
  },
  {
    "body": "PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil perpetrated by skilled but perverted professionals.",
    "uuid": "0df213372d09",
    "publish_date": "2011-07-04 19:11:41",
    "authors": ["Jon Ribbens"],
    "authors_uuid": ["0bdfeceda8f6"],
    "tags_uuid": ["91d538929d2d", "8ea8b10f34b0", "2e662c7bed7a"],
    "tags": ["perl", "php", "languages"]
  },
  {
    "body": "Computer Science is no more about computers than astronomy is about telescopes.",
    "uuid": "4470a3cebfc2",
    "publish_date": "2011-07-04 19:13:17",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["490b10b26569"],
    "tags": ["computer science"]
  },
  {
    "body": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.",
    "uuid": "6001d1399291",
    "publish_date": "2011-07-04 19:14:09",
    "authors": ["Antoine de Saint Exupéry"],
    "authors_uuid": ["a8f746f6a156"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The most exciting phrase to hear in science, the one that heralds new discoveries, is not 'Eureka!' but 'That's funny...'",
    "uuid": "a517dc6b20ce",
    "publish_date": "2011-07-04 19:15:55",
    "authors": ["Isaac Asimov"],
    "authors_uuid": ["23430596e351"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "The difference between theory and practice is smaller in theory than in practice.",
    "uuid": "890c6ea33d9d",
    "publish_date": "2011-07-04 19:16:49",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["f084f31aed32"],
    "tags": ["theory"]
  },
  {
    "body": "Never trust a programmer in a suit.",
    "uuid": "49b7f7729192",
    "publish_date": "2011-07-04 19:17:59",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "The trouble with programmers is that you can never tell what a programmer is doing until it's too late.",
    "uuid": "6e61ae30a855",
    "publish_date": "2011-07-05 08:46:07",
    "authors": ["Seymour Cray"],
    "authors_uuid": ["d5a897cb2918"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Rules of Optimization: Rule 1: Don't do it. Rule 2 (for experts only): Don't do it yet.",
    "uuid": "08b463de449f",
    "publish_date": "2011-07-05 08:54:37",
    "authors": ["Michael A. Jackson"],
    "authors_uuid": ["01b0a123b540"],
    "tags_uuid": ["56c51ddb335c"],
    "tags": ["optimization"]
  },
  {
    "body": "It's not at all important to get it right the first time. It's vitally important to get it right the last time.",
    "uuid": "346954f535bd",
    "publish_date": "2011-07-05 08:55:39",
    "authors": ["Dave Thomas", "Andy Hunt"],
    "authors_uuid": ["493bda434c28", "187171c0d7c4"],
    "tags_uuid": ["fc973eebe544", "2806ae712337"],
    "tags": ["specification", "refactoring"]
  },
  {
    "body": "A happy programmer is a productive programmer. That's why we optimize for happiness and you should too. Don't just pick tools and practices based on industry standards or performance metrics. Look at the intangibles: Is there passion, pride, and craftmanship here? Would you truly be happy working in this environment eight hours a day?",
    "uuid": "0e725ba766d5",
    "publish_date": "2011-07-05 09:38:55",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["df01cc3ecc20", "16d05f8e5421"],
    "tags": ["productivity", "programmers"]
  },
  {
    "body": "You don't have a scaling problem yet.",
    "uuid": "5baadc631e2a",
    "publish_date": "2011-07-05 12:20:42",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["21e47cddf063"],
    "tags": ["scaling"]
  },
  {
    "body": "True innovation often comes from the small startup who is lean enough to launch a market but lacks the heft to own it.",
    "uuid": "fce8a5a5dbd7",
    "publish_date": "2011-07-05 12:23:08",
    "authors": ["Timm Martin"],
    "authors_uuid": ["89f5dc1d4724"],
    "tags_uuid": ["4131ccc3bad1"],
    "tags": ["startups"]
  },
  {
    "body": "Deleted code is debugged code.",
    "uuid": "760aa78df513",
    "publish_date": "2011-07-05 13:11:45",
    "authors": ["Jeff Sickel"],
    "authors_uuid": ["8facba2955b9"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "If you're willing to restrict the flexibility of your approach, you can almost always do something better.",
    "uuid": "fc74374fce5a",
    "publish_date": "2011-07-05 13:13:36",
    "authors": ["John Carmack"],
    "authors_uuid": ["aaebabb8c61b"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The central enemy of reliability is complexity.",
    "uuid": "1c62392b2874",
    "publish_date": "2011-07-05 13:16:51",
    "authors": ["Daniel Geer"],
    "authors_uuid": ["ab7f3d84d9a2"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Simplicity is prerequisite for reliability.",
    "uuid": "847b3ecc8ee8",
    "publish_date": "2011-07-05 13:18:00",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "A program is portable to the extent that it can be easily moved to a new computing environment with much less effort than would be required to write it afresh.",
    "uuid": "41cc4a4c23d1",
    "publish_date": "2011-07-05 13:18:39",
    "authors": ["W. Stan Brown"],
    "authors_uuid": ["9b337828a7bb"],
    "tags_uuid": ["ba763cdd445a", "671ef89b91e6"],
    "tags": ["complexity", "compatibility"]
  },
  {
    "body": "Just because the standard provides a cliff in front of you, you are not necessarily required to jump off it.",
    "uuid": "e2db21daf377",
    "publish_date": "2011-07-05 13:21:18",
    "authors": ["Norman Diamond"],
    "authors_uuid": ["07555d26bc6f"],
    "tags_uuid": ["c810264ebce8"],
    "tags": ["standards"]
  },
  {
    "body": "Correctness is clearly the prime quality. If a system does not do what it is supposed to do, then everything else about it matters little.",
    "uuid": "286427ff3cbf",
    "publish_date": "2011-07-05 13:23:27",
    "authors": ["Bertrand Meyer"],
    "authors_uuid": ["1bad4873b494"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "Compatibility means deliberately repeating other people's mistakes.",
    "uuid": "1d2238a83458",
    "publish_date": "2011-07-05 13:24:53",
    "authors": ["David Wheeler"],
    "authors_uuid": ["df07b6970bc9"],
    "tags_uuid": ["671ef89b91e6"],
    "tags": ["compatibility"]
  },
  {
    "body": "Theory is when you know something, but it doesn't work. Practice is when something works, but you don't know why. Programmers combine theory and practice: Nothing works and they don't know why.",
    "uuid": "5ad8c2c073fa",
    "publish_date": "2011-07-05 13:26:46",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Premature optimization is the root of all evil in programming.",
    "uuid": "d5663242f8a3",
    "publish_date": "2011-07-05 13:28:26",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["56c51ddb335c"],
    "tags": ["optimization"]
  },
  {
    "body": "Testing can show the presence of errors, but not their absence.",
    "uuid": "bacc2895b689",
    "publish_date": "2011-07-05 13:29:33",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["e8e63fda46b9", "433a3a423cd9"],
    "tags": ["tdd", "testing"]
  },
  {
    "body": "A computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match.",
    "uuid": "56e31cc0400c",
    "publish_date": "2011-07-05 13:31:32",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Code never lies, comments sometimes do.",
    "uuid": "8deaf515bc69",
    "publish_date": "2011-07-05 13:34:03",
    "authors": ["Ron Jeffries"],
    "authors_uuid": ["091bc03c4242"],
    "tags_uuid": ["8f1619347921"],
    "tags": ["commenting"]
  },
  {
    "body": "Profanity is the one language all programmers know best.",
    "uuid": "a57441e451cf",
    "publish_date": "2011-07-05 15:08:00",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "I don't care if it works on your machine! We are not shipping your machine!",
    "uuid": "bd76211ea7d1",
    "publish_date": "2011-07-05 15:10:32",
    "authors": ["Vidiu Platon"],
    "authors_uuid": ["19815853f29b"],
    "tags_uuid": ["2464e5ee4186"],
    "tags": ["deploying"]
  },
  {
    "body": "Each new user of a new system uncovers a new class of bugs.",
    "uuid": "b8be708d36ec",
    "publish_date": "2011-07-05 15:12:37",
    "authors": ["Brian W. Kernighan"],
    "authors_uuid": ["0086884ef4b1"],
    "tags_uuid": ["21d9e61717db", "bd67f2b3cd5c"],
    "tags": ["debugging", "bugs"]
  },
  {
    "body": "Workaholics aren't heroes. They don't save the day, they just use it up. The real hero is already because she figured out a faster way to get things done.",
    "uuid": "a286a091ca35",
    "publish_date": "2011-07-05 19:00:21",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "A design is &ldquo;simple&rdquo; if it follows these rules: Runs all the tests; Contains no duplication; Expresses the intent of the programmer; Minimizes the number of classes and methods.",
    "uuid": "a126648998f1",
    "publish_date": "2011-07-05 19:03:10",
    "authors": ["Kent Beck"],
    "authors_uuid": ["7b5113d7f9a5"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Write shy code &mdash; modules that don't reveal anything unnecessary to other modules and that don't rely on other modules' implementations.",
    "uuid": "414e6091da3a",
    "publish_date": "2011-07-05 19:07:39",
    "authors": ["Andy Hunt", "Dave Thomas"],
    "authors_uuid": ["187171c0d7c4", "493bda434c28"],
    "tags_uuid": ["3e7aeeca901a"],
    "tags": ["oop"]
  },
  {
    "body": "Programmers must avoid leaving false clues that obscure the meaning of code.",
    "uuid": "0bf07f1cf501",
    "publish_date": "2011-07-05 19:11:15",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["3e7aeeca901a"],
    "tags": ["oop"]
  },
  {
    "body": "Encoded names are seldom pronounceable and are easy to miss-type.",
    "uuid": "50b816459ca5",
    "publish_date": "2011-07-05 19:14:42",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["26400021f363"],
    "tags": ["naming"]
  },
  {
    "body": "When you come across a stumbling block because the code doesn't quite fit anymore, or you notice two things that should really be merged, or anything else at all strikes you as being &ldquo;wrong&rdquo;, don't hesitate to change it. There's no time like the present.",
    "uuid": "b993d5922040",
    "publish_date": "2011-07-05 19:17:49",
    "authors": ["Andy Hunt", "Dave Thomas"],
    "authors_uuid": ["187171c0d7c4", "493bda434c28"],
    "tags_uuid": ["2806ae712337"],
    "tags": ["refactoring"]
  },
  {
    "body": "Don't waste your time typing up that long visionary tome; no one's going to read it. Take consolation in the fact that if you give your product enough room to grow itself, in the end it won't resemble anything you wrote about anyway.",
    "uuid": "329ab8a920be",
    "publish_date": "2011-07-05 19:22:29",
    "authors": ["Gina Trapani"],
    "authors_uuid": ["f99cf241eff6"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.",
    "uuid": "20d6a688237f",
    "publish_date": "2011-07-05 19:26:21",
    "authors": ["Martin Golding"],
    "authors_uuid": ["1bcb19fa5c0b"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Programming is like sex: one mistake and you're providing support for a lifetime.",
    "uuid": "a2265dfb8748",
    "publish_date": "2011-07-05 19:28:03",
    "authors": ["Michael Sinz"],
    "authors_uuid": ["313632ba0184"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Eagleson's Law: Any code of your own that you haven't looked at for six or more months might as well have been written by someone else.",
    "uuid": "a552c0a13aa3",
    "publish_date": "2011-07-05 19:30:03",
    "authors": ["Alan Eagleson"],
    "authors_uuid": ["55e1b48b233e"],
    "tags_uuid": ["2806ae712337"],
    "tags": ["refactoring"]
  },
  {
    "body": "Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.",
    "uuid": "770e48a9e714",
    "publish_date": "2011-07-05 19:34:09",
    "authors": ["Eric Raymond"],
    "authors_uuid": ["67f54a69ab2d"],
    "tags_uuid": ["490b10b26569"],
    "tags": ["computer science"]
  },
  {
    "body": "A sentence should be enough to get the idea across.",
    "uuid": "1cf45c8d4472",
    "publish_date": "2011-07-05 19:38:22",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Whenever there is a sticking point, ask, &ldquo;are we staying true to the vision?&rdquo;.",
    "uuid": "a9c3617bd643",
    "publish_date": "2011-07-05 17:39:33",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "In the one and only true way. The object-oriented version of 'Spaghetti code' is, of course, 'Lasagna code'. (Too many layers).",
    "uuid": "2f272aa505f7",
    "publish_date": "2011-07-05 19:45:04",
    "authors": ["Roberto Waltman"],
    "authors_uuid": ["e9098ced61f6"],
    "tags_uuid": ["3e7aeeca901a"],
    "tags": ["oop"]
  },
  {
    "body": "Learning to program has no more to do with designing interactive software than learning to touch type has to do with writing poetry.",
    "uuid": "27dd7daa3144",
    "publish_date": "2011-07-05 19:47:00",
    "authors": ["Ted Nelson"],
    "authors_uuid": ["10651f0f3985"],
    "tags_uuid": ["f084f31aed32"],
    "tags": ["theory"]
  },
  {
    "body": "First learn computer science and all the theory. Next develop a programming style. Then forget all that and just hack.",
    "uuid": "a833e30485f5",
    "publish_date": "2011-07-05 19:48:24",
    "authors": ["George Carrette"],
    "authors_uuid": ["57d059907409"],
    "tags_uuid": ["490b10b26569"],
    "tags": ["computer science"]
  },
  {
    "body": "Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.",
    "uuid": "f32b9e4930a1",
    "publish_date": "2011-07-05 19:51:17",
    "authors": ["Linus Torvalds"],
    "authors_uuid": ["8491fd3f9c47"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Any fool can write code that a computer can understand. Good programmers write code that humans can understand.",
    "uuid": "448a417fedad",
    "publish_date": "2011-07-05 19:52:50",
    "authors": ["Martin Fowler"],
    "authors_uuid": ["721333935c91"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "We are just as proud of what our products don't do as we are as what they do.",
    "uuid": "e93da5ee461c",
    "publish_date": "2011-07-05 19:53:20",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Software sucks because users demand it to.",
    "uuid": "de7a04895ef9",
    "publish_date": "2011-07-05 19:58:30",
    "authors": ["Nathan Myhrvold"],
    "authors_uuid": ["5c8939dd1141"],
    "tags_uuid": ["fdcfd016c9e7"],
    "tags": ["users"]
  },
  {
    "body": "There is not now, nor has there ever been, nor will there ever be, any programming language in which it is the least bit difficult to write bad code.",
    "uuid": "85b01522842c",
    "publish_date": "2011-07-05 20:00:09",
    "authors": ["Flon's Law"],
    "authors_uuid": ["c87561fc85bf"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "Anything that can possibly go wrong, will go wrong.",
    "uuid": "95ea218b2531",
    "publish_date": "2011-07-05 20:04:27",
    "authors": ["Murphy's Law"],
    "authors_uuid": ["1bd49e8a5a9e"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday's code.",
    "uuid": "168d313e03fa",
    "publish_date": "2011-07-06 06:55:49",
    "authors": ["Christopher Thompson"],
    "authors_uuid": ["e6b58b159361"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "Your task is not to foresee the future, but to enable it.",
    "uuid": "c7595a3a07f2",
    "publish_date": "2011-07-06 06:56:48",
    "authors": ["Antoine de Saint Exupéry"],
    "authors_uuid": ["a8f746f6a156"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "Theory and practice sometimes clash. And when that happens, theory loses. Every single time.",
    "uuid": "54735bb55250",
    "publish_date": "2011-07-06 06:57:06",
    "authors": ["Linus Torvalds"],
    "authors_uuid": ["8491fd3f9c47"],
    "tags_uuid": ["f084f31aed32"],
    "tags": ["theory"]
  },
  {
    "body": "Programmer &mdash; an organism that turns coffee into software.",
    "uuid": "6e3ab1808b4c",
    "publish_date": "2011-07-06 10:23:47",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "All programmers are playwrights and all computers are lousy actors.",
    "uuid": "7cfa0bc513f0",
    "publish_date": "2011-07-06 10:24:31",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Another effective technique is to explain your code to someone else.  This will often cause you to explain the bug to yourself.  Sometimes it takes no more than a few sentences, followed by an embarrassed &ldquo;Never mind, I see what's wrong.  Sorry to bother you.&rdquo;  This works remarkably well; you can even use non-programmers as listeners.  One university computer center kept a teddy bear near the help desk.  Students with mysterious bugs were required to explain them to the bear before they could speak to a human counselor.",
    "uuid": "abf2b0234684",
    "publish_date": "2011-07-06 10:25:06",
    "authors": ["Brian W. Kernighan", "Rob Pike"],
    "authors_uuid": ["0086884ef4b1", "569cfb601ec7"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "A good programmer is someone who always looks both ways before crossing a one-way street.",
    "uuid": "29e744d6fdbc",
    "publish_date": "2011-07-06 10:26:13",
    "authors": ["Doug Linder"],
    "authors_uuid": ["dcbb0a404d49"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Beta. Software undergoes beta testing shortly before it's released. Beta is Latin for &ldquo;still doesn't work&rdquo;.",
    "uuid": "521fea0de481",
    "publish_date": "2011-07-06 10:26:57",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["d18c1b030691"],
    "tags": ["beta"]
  },
  {
    "body": "Good code is its own best documentation.  As you're about to add a comment, ask yourself, &ldquo;How can I improve the code so that this comment isn't needed?&rdquo;",
    "uuid": "7bc4d5593f1a",
    "publish_date": "2011-07-06 10:27:44",
    "authors": ["Steve McConnell"],
    "authors_uuid": ["a1c6ce30251e"],
    "tags_uuid": ["8f1619347921"],
    "tags": ["commenting"]
  },
  {
    "body": "Great software, likewise, requires a fanatical devotion to beauty.  If you look inside good software, you find that parts no one is ever supposed to see are beautiful too.  I'm not claiming I write great software, but I know that when it comes to code I behave in a way that would make me eligible for prescription drugs if I approached everyday life the same way.  It drives me crazy to see code that's badly indented, or that uses ugly variable names.",
    "uuid": "82a0dd968fbc",
    "publish_date": "2011-07-06 10:28:22",
    "authors": ["Paul Graham"],
    "authors_uuid": ["8ecba539670d"],
    "tags_uuid": ["26400021f363"],
    "tags": ["naming"]
  },
  {
    "body": "One man's crappy software is another man's full time job.",
    "uuid": "e2a3e2e13709",
    "publish_date": "2011-07-06 10:28:56",
    "authors": ["Jessica Gaston"],
    "authors_uuid": ["ceb35fb0e32f"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "It's okay to figure out murder mysteries, but you shouldn't need to figure out code.  You should be able to read it.",
    "uuid": "b850522bb890",
    "publish_date": "2011-07-06 10:29:48",
    "authors": ["Steve McConnell"],
    "authors_uuid": ["a1c6ce30251e"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Programming is similar to a game of golf.  The point is not getting the ball in the hole but how many strokes it takes.",
    "uuid": "7d933f3f2bf1",
    "publish_date": "2011-07-06 10:30:13",
    "authors": ["Harlan Mills"],
    "authors_uuid": ["e866ca5f27d2"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Good programming is good writing.",
    "uuid": "3b61790f73b8",
    "publish_date": "2011-07-06 10:55:25",
    "authors": ["John Shore"],
    "authors_uuid": ["b429fabc65f9"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "In programming, the hard part isn't solving problems, but deciding what problems to solve.",
    "uuid": "6440783b2e8a",
    "publish_date": "2011-07-06 10:56:12",
    "authors": ["Paul Graham"],
    "authors_uuid": ["8ecba539670d"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "I am rarely happier than when spending entire day programming my computer to perform automatically a task that it would otherwise take me a good ten seconds to do by hand.",
    "uuid": "40ff78849982",
    "publish_date": "2011-07-06 10:56:43",
    "authors": ["Douglas Adams"],
    "authors_uuid": ["bfc694ae69d3"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. Few media of creation are so flexible, so easy to polish and rework, so readily capable of realizing grand conceptual structures.",
    "uuid": "b4e1127dc888",
    "publish_date": "2011-07-06 10:58:00",
    "authors": ["Frederick P. Brooks"],
    "authors_uuid": ["583742cadc21"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Managing senior programmers is like herding cats.",
    "uuid": "246bf3786af5",
    "publish_date": "2011-07-06 10:58:58",
    "authors": ["Dave Platt"],
    "authors_uuid": ["b21d086493d3"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "It's better to wait for a productive programmer to become available than it is to wait for the first available programmer to become productive.",
    "uuid": "a1a3a68d3d3e",
    "publish_date": "2011-07-06 10:59:26",
    "authors": ["Steve McConnell"],
    "authors_uuid": ["a1c6ce30251e"],
    "tags_uuid": ["df01cc3ecc20", "16d05f8e5421"],
    "tags": ["productivity", "programmers"]
  },
  {
    "body": "Make everything as simple as possible, but not simpler.",
    "uuid": "ed775bb64b58",
    "publish_date": "2011-07-06 11:08:47",
    "authors": ["Albert Einstein"],
    "authors_uuid": ["e62103ae06af"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Reusing pieces of code is liked picking off sentences from other people's stories and trying to make a magazine article.",
    "uuid": "73c5f60d2da4",
    "publish_date": "2011-07-06 11:12:02",
    "authors": ["Bob Frankston"],
    "authors_uuid": ["8c3a81f2f74c"],
    "tags_uuid": ["cffa5ba93708"],
    "tags": ["reusing"]
  },
  {
    "body": "The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.",
    "uuid": "bb9b1edfadde",
    "publish_date": "2011-07-06 11:13:13",
    "authors": ["Paul Graham"],
    "authors_uuid": ["8ecba539670d"],
    "tags_uuid": ["3e7aeeca901a"],
    "tags": ["oop"]
  },
  {
    "body": "Learn the principle, abide by the principle, and dissolve the principle.",
    "uuid": "e3a2354e8093",
    "publish_date": "2011-07-06 11:15:09",
    "authors": ["Bruce Lee"],
    "authors_uuid": ["f5228a0afc6d"],
    "tags_uuid": ["f084f31aed32"],
    "tags": ["theory"]
  },
  {
    "body": "Playfully doing something difficult, whether useful or not, that is hacking.",
    "uuid": "6c33391faf81",
    "publish_date": "2011-07-06 11:18:04",
    "authors": ["Richard M. Stallman"],
    "authors_uuid": ["2c980b2e69dc"],
    "tags_uuid": ["66a29647736f"],
    "tags": ["hacking"]
  },
  {
    "body": "It's not a bug &mdash; it's an undocumented feature.",
    "uuid": "2426dc522f9d",
    "publish_date": "2011-07-08 06:34:00",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["bd67f2b3cd5c"],
    "tags": ["bugs"]
  },
  {
    "body": "The cleaner and nicer the program, the faster it's going to run. And if it doesn't, it'll be easy to make it fast.",
    "uuid": "0d331893d0bf",
    "publish_date": "2011-07-08 09:41:19",
    "authors": ["Joshua Bloch"],
    "authors_uuid": ["7eaa626354f6"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Adding manpower to a late software project makes it later.",
    "uuid": "7c9ea30eb2a2",
    "publish_date": "2011-07-08 09:42:06",
    "authors": ["Frederick P. Brooks"],
    "authors_uuid": ["583742cadc21"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the universe trying to build bigger and better idiots. So far, the universe is winning.",
    "uuid": "cf13c9eb8f35",
    "publish_date": "2011-07-08 09:42:48",
    "authors": ["Rick Cook"],
    "authors_uuid": ["2bf1a6de55cd"],
    "tags_uuid": ["fdcfd016c9e7"],
    "tags": ["users"]
  },
  {
    "body": "To me programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge.",
    "uuid": "3264726f996c",
    "publish_date": "2011-07-08 09:43:34",
    "authors": ["Grace Hopper"],
    "authors_uuid": ["beaa1cfc9a53"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "A programming language is low level when its programs require attention to the irrelevant.",
    "uuid": "f792ca163710",
    "publish_date": "2011-07-08 23:08:41",
    "authors": ["Alan J. Perlis"],
    "authors_uuid": ["37c5afe528d6"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "A most important, but also most elusive, aspect of any tool is its influence on the habits of those who train themselves in its use. If the tool is a programming language this influence is, whether we like it or not, an influence on our thinking habits.",
    "uuid": "60ab5cdcc743",
    "publish_date": "2011-07-08 23:18:02",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "Programs must be written for people to read, and only incidentally for machines to execute.",
    "uuid": "f5c4d22d5738",
    "publish_date": "2011-07-08 23:19:10",
    "authors": ["Gerald Jay", "Harold Abelson"],
    "authors_uuid": ["50a70d5965da", "37f4fe16cdf7"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "It comes from saying no to 1,000 things to make sure we don't get on the wrong track or try to do too much.",
    "uuid": "00bcd4a12ff4",
    "publish_date": "2011-07-09 00:10:09",
    "authors": ["Steve Jobs"],
    "authors_uuid": ["8e1c29f1b7f1"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "When you feel the need to write a comment, first try to refactor the code so that any comment becomes superflous.",
    "uuid": "c7bcb566a9f6",
    "publish_date": "2011-07-09 20:27:20",
    "authors": ["Martin Fowler"],
    "authors_uuid": ["721333935c91"],
    "tags_uuid": ["8f1619347921", "2806ae712337"],
    "tags": ["commenting", "refactoring"]
  },
  {
    "body": "A language that doesn't have everything is actually easier to program in than some that do.",
    "uuid": "44b16c403dec",
    "publish_date": "2011-07-10 10:25:09",
    "authors": ["Dennis M. Ritchie"],
    "authors_uuid": ["547d0b1da532"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "In corporate environments the product don't have to be good. Sometimes they don't even have to exist... if you are a thoughtful developer, you are in the wrong place!",
    "uuid": "e3ac0e29f7de",
    "publish_date": "2011-07-11 10:50:59",
    "authors": ["Jeff Atwood"],
    "authors_uuid": ["6591f999f41a"],
    "tags_uuid": ["76af4d7121a0"],
    "tags": ["corporate"]
  },
  {
    "body": "The function of good software is to make the complex appear to be simple.",
    "uuid": "907a3b3d9bed",
    "publish_date": "2011-07-13 15:55:20",
    "authors": ["Grady Booch"],
    "authors_uuid": ["64add21260b3"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "You broke the build!",
    "uuid": "2f61f4271cb8",
    "publish_date": "2011-07-14 11:08:46",
    "authors": ["Agnes"],
    "authors_uuid": ["84b790bb3e5d"],
    "tags_uuid": ["2464e5ee4186", "d5bb6708fa41"],
    "tags": ["deploying", "version-control"]
  },
  {
    "body": "Constraints are advantages in disguise. Limited resources force you to make do with what you've got. There's no room for waste. And that forces you to be creative.",
    "uuid": "ef13b6a1922d",
    "publish_date": "2011-07-18 10:26:43",
    "authors": ["37Signals"],
    "authors_uuid": ["d6f81f5cfd1e"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "One of the things I've been trying to do is look for simpler or rules underpinning good or bad design. I think one of the most valuable rules is avoid duplication. 'Once and only once' is the Extreme Programming phrase.",
    "uuid": "048beed69861",
    "publish_date": "2011-07-18 10:29:42",
    "authors": ["Martin Fowler"],
    "authors_uuid": ["721333935c91"],
    "tags_uuid": ["1660e265686e"],
    "tags": ["dry"]
  },
  {
    "body": "The question of whether Machines Can Think... is about as relevant as the question of whether Submarines Can Swim.",
    "uuid": "a50734b779f6",
    "publish_date": "2011-07-18 10:30:49",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["490b10b26569"],
    "tags": ["computer science"]
  },
  {
    "body": "Measuring programming progress by lines of code is like measuring aircraft building progress by weight.",
    "uuid": "be73dc9389af",
    "publish_date": "2011-07-22 08:35:05",
    "authors": ["Bill Gates"],
    "authors_uuid": ["c75df3e851bf"],
    "tags_uuid": ["2e471af7f345"],
    "tags": ["estimating"]
  },
  {
    "body": "First, solve the problem. Then, write the code.",
    "uuid": "037b1d98ecfc",
    "publish_date": "2011-07-22 08:36:05",
    "authors": ["John Johnson"],
    "authors_uuid": ["7ee8f29cfe70"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "The value of a prototype is in the education it gives you, not in the code itself.",
    "uuid": "1f2f5c81ed9d",
    "publish_date": "2011-07-22 08:38:35",
    "authors": ["Alan Cooper"],
    "authors_uuid": ["f246ddd728e7"],
    "tags_uuid": ["bee8d1c7a13e"],
    "tags": ["prototyping"]
  },
  {
    "body": "Ugly programs are like ugly suspension bridges: they're much more liable to collapse than pretty ones, because the way humans (especially engineer-humans) perceive beauty is intimately related to our ability to process and understand complexity. A language that makes it hard to write elegant code makes it hard to write good code.",
    "uuid": "4252bc3a1e3f",
    "publish_date": "2011-07-22 08:39:49",
    "authors": ["Eric Raymond"],
    "authors_uuid": ["67f54a69ab2d"],
    "tags_uuid": ["2e662c7bed7a", "ba763cdd445a"],
    "tags": ["languages", "complexity"]
  },
  {
    "body": "Every program has two purposes: The one for which it was written and another for which it wasn't.",
    "uuid": "2f6794108b40",
    "publish_date": "2011-07-24 15:29:12",
    "authors": ["Alan J. Perlis"],
    "authors_uuid": ["37c5afe528d6"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.",
    "uuid": "2a766281fc25",
    "publish_date": "2011-07-24 15:36:13",
    "authors": ["Alan J. Perlis"],
    "authors_uuid": ["37c5afe528d6"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Sometimes the problem is to discover what the problem is.",
    "uuid": "1268f53af645",
    "publish_date": "2011-07-25 12:30:21",
    "authors": ["Gordon Glegg"],
    "authors_uuid": ["a194b2fc062e"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "Before software can be reusable, it first has to be usable.",
    "uuid": "8094d9a28449",
    "publish_date": "2011-08-05 11:54:52",
    "authors": ["Ralph Johnson"],
    "authors_uuid": ["96f52c2d2c32"],
    "tags_uuid": ["cffa5ba93708"],
    "tags": ["reusing"]
  },
  {
    "body": "There are two ways to write error-free programs; only the third works.",
    "uuid": "4b3f5abea62a",
    "publish_date": "2011-08-05 11:57:50",
    "authors": ["Alan J. Perlis"],
    "authors_uuid": ["37c5afe528d6"],
    "tags_uuid": ["bd67f2b3cd5c"],
    "tags": ["bugs"]
  },
  {
    "body": "Software and cathedrals are much the same &mdash; first we build them, then we pray.",
    "uuid": "10e88edeeda9",
    "publish_date": "2011-08-05 11:59:30",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "Real programmers can write assembly code in any language.",
    "uuid": "7c090f85cebf",
    "publish_date": "2011-08-05 12:00:33",
    "authors": ["Larry Wall"],
    "authors_uuid": ["efd5a93782e9"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "I've finally learned what &ldquo;upward compatible&rdquo; means. It means we get to keep all our old mistakes.",
    "uuid": "586a09d5a33a",
    "publish_date": "2011-08-05 12:01:27",
    "authors": ["Dennie van Tassel"],
    "authors_uuid": ["20bf8a3666e8"],
    "tags_uuid": ["671ef89b91e6", "cffa5ba93708"],
    "tags": ["compatibility", "reusing"]
  },
  {
    "body": "In software, we rarely have meaningful requirements. Even if we do, the only measure of success that matters is whether our solution solves the customer's shifting idea of what their problem is.",
    "uuid": "ca259bb512ff",
    "publish_date": "2011-08-09 09:37:58",
    "authors": ["Jeff Atwood"],
    "authors_uuid": ["6591f999f41a"],
    "tags_uuid": ["fc973eebe544"],
    "tags": ["specification"]
  },
  {
    "body": "A lack of planning on your part does not constitute an emergency on my part.",
    "uuid": "9a78794b1f38",
    "publish_date": "2011-08-09 09:38:45",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["fc973eebe544", "7ea02d81a2d0"],
    "tags": ["specification", "planning"]
  },
  {
    "body": "The best way to predict the future is to implement it.",
    "uuid": "38af4531ee25",
    "publish_date": "2011-08-09 09:39:20",
    "authors": ["Alan Kay"],
    "authors_uuid": ["08a42b591dc3"],
    "tags_uuid": ["4131ccc3bad1"],
    "tags": ["startups"]
  },
  {
    "body": "After you finish the first 90% of a project, you have to finish the other 90%.",
    "uuid": "0c8bc8a898fd",
    "publish_date": "2011-08-10 10:57:58",
    "authors": ["Michael Abrash"],
    "authors_uuid": ["b681c412e184"],
    "tags_uuid": ["2e471af7f345"],
    "tags": ["estimating"]
  },
  {
    "body": "Any non-trivial program contains at least one bug.",
    "uuid": "642230bcdaba",
    "publish_date": "2011-08-10 11:02:07",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["bd67f2b3cd5c"],
    "tags": ["bugs"]
  },
  {
    "body": "At the source of every error which is blamed on the computer you will find at least two human errors, including the error of blaming it on the computer.",
    "uuid": "26ba9c88e6a1",
    "publish_date": "2011-08-10 11:02:35",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["21d9e61717db", "bd67f2b3cd5c"],
    "tags": ["debugging", "bugs"]
  },
  {
    "body": "Good software, like wine, takes time.",
    "uuid": "4db9a9ede568",
    "publish_date": "2011-08-10 11:03:39",
    "authors": ["Joel Spolsky"],
    "authors_uuid": ["22236409daf2"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "Machines should work. People should think.",
    "uuid": "62709a7b8c24",
    "publish_date": "2011-08-10 11:04:23",
    "authors": ["IBM Pollyanna Principle"],
    "authors_uuid": ["2adc8a2aa13f"],
    "tags_uuid": ["b85badf703f2"],
    "tags": ["computers"]
  },
  {
    "body": "We’re programmers. Programmers are, in their hearts, architects, and the first thing they want to do when they get to a site is to bulldoze the place flat and build something grand. We’re not excited by incremental renovation: tinkering, improving, planting flower beds.",
    "uuid": "e5e688a9c021",
    "publish_date": "2011-08-11 05:47:24",
    "authors": ["Joel Spolsky"],
    "authors_uuid": ["22236409daf2"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "The key to making programs fast is to make them do practically nothing.",
    "uuid": "8f792ad12a7a",
    "publish_date": "2011-08-12 12:10:41",
    "authors": ["Mike Haertel"],
    "authors_uuid": ["3a6d38743c01"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The adjustment period from solo programming to collaborative programming was like eating a hot pepper. The first time you try it, you may not like it because you are not used to it. However the more you eat it, the more you like it.",
    "uuid": "8bc15f08e41b",
    "publish_date": "2011-08-29 12:28:17",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["f905a965f502", "760446f65360"],
    "tags": ["pair programming", "extreme programming"]
  },
  {
    "body": "The trick is to fix the problem you have, rather than the problem you want.",
    "uuid": "33e3212f7b1c",
    "publish_date": "2011-08-29 12:33:11",
    "authors": ["Bram Cohen"],
    "authors_uuid": ["e707c4c1ab62"],
    "tags_uuid": ["bd67f2b3cd5c", "ba763cdd445a"],
    "tags": ["bugs", "complexity"]
  },
  {
    "body": "So-called &ldquo;smart&rdquo; software usually is the worst you can imagine.",
    "uuid": "898c3608471d",
    "publish_date": "2011-08-29 12:34:07",
    "authors": ["Christian Neukirchen"],
    "authors_uuid": ["6136ae35f62a"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "Such is modern computing: everything simple is made too complicated because it's easy to fiddle with; everything complicated stays complicated because it's hard to fix.",
    "uuid": "53497c5424e8",
    "publish_date": "2011-08-29 12:35:55",
    "authors": ["Rob Pike"],
    "authors_uuid": ["569cfb601ec7"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The standard rule is, when you're in a hole, stop digging; that seems not to apply [to] software nowadays.",
    "uuid": "ebaa7e51510e",
    "publish_date": "2011-08-29 12:36:47",
    "authors": ["Ron Minnich"],
    "authors_uuid": ["df08a6bc266b"],
    "tags_uuid": ["ba763cdd445a", "bd67f2b3cd5c"],
    "tags": ["complexity", "bugs"]
  },
  {
    "body": "A complex system that works is invariably found to have evolved from a simple system that worked. The inverse proposition also appears to be true: A complex system designed from scratch never works and cannot be made to work.",
    "uuid": "c06da254c416",
    "publish_date": "2011-08-29 12:38:54",
    "authors": ["John Gall"],
    "authors_uuid": ["cee5c485ef7b"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "One of the big lessons of a big project is you don't want people that aren't really programmers programming, you'll suffer for it!",
    "uuid": "722fc4180bc1",
    "publish_date": "2011-08-29 12:39:35",
    "authors": ["John Carmack"],
    "authors_uuid": ["aaebabb8c61b"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Why do we never have time to do it right, but always have time to do it over?",
    "uuid": "42dce0d64459",
    "publish_date": "2011-08-31 12:38:54",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "Better train people and risk they leave &mdash; than do nothing and risk they stay.",
    "uuid": "5b3e74a6be40",
    "publish_date": "2011-08-31 12:40:18",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "And the users exclaimed with a laugh and a taunt: It's just what we asked for but not what we want.",
    "uuid": "1aea25174c35",
    "publish_date": "2011-08-31 12:43:13",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["fdcfd016c9e7"],
    "tags": ["users"]
  },
  {
    "body": "In order to understand recursion, one must first understand recursion.",
    "uuid": "dcb09d65072f",
    "publish_date": "2011-08-31 14:20:17",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["f1ff3769767f"],
    "tags": ["functions"]
  },
  {
    "body": "Without requirements or design, programming is the art of adding bugs to an empty text file.",
    "uuid": "0f2afedee113",
    "publish_date": "2011-09-04 08:37:23",
    "authors": ["Louis Srygley"],
    "authors_uuid": ["c8f244f2797a"],
    "tags_uuid": ["fc973eebe544", "46278bd60154", "bd67f2b3cd5c"],
    "tags": ["specification", "programming", "bugs"]
  },
  {
    "body": "Ready, fire, aim: the fast approach to software development. Ready, aim, aim, aim, aim: the slow approach to software development.",
    "uuid": "74dc4e7ac068",
    "publish_date": "2011-09-04 08:39:18",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Estimate always goes wrong. That too in one way.",
    "uuid": "181eaea52ed3",
    "publish_date": "2011-09-12 08:26:21",
    "authors": ["Sumit Agrawal"],
    "authors_uuid": ["f0d8a757c7f5"],
    "tags_uuid": ["2e471af7f345"],
    "tags": ["estimating"]
  },
  {
    "body": "Good programming is 99% sweat and 1% coffee.",
    "uuid": "347eb84167cc",
    "publish_date": "2011-09-12 08:27:31",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Law 1: Every program can be optimised to be smaller. Law 2: There's always one more bug. Corollary: Every program can be reduced to a one-line bug.",
    "uuid": "969cf7e90789",
    "publish_date": "2011-09-12 08:28:03",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["bd67f2b3cd5c", "56c51ddb335c"],
    "tags": ["bugs", "optimization"]
  },
  {
    "body": "Inside every large program, there is a small program trying to get out.",
    "uuid": "3e8dd093d90e",
    "publish_date": "2011-09-15 10:42:42",
    "authors": ["C. A. R. Hoare"],
    "authors_uuid": ["a6bd6d72ec53"],
    "tags_uuid": ["21d9e61717db", "ba763cdd445a", "fc973eebe544"],
    "tags": ["debugging", "complexity", "specification"]
  },
  {
    "body": "A language that doesn't affect the way you think about programming is not worth knowing.",
    "uuid": "f19cd364c084",
    "publish_date": "2011-09-15 10:44:08",
    "authors": ["Alan J. Perlis"],
    "authors_uuid": ["37c5afe528d6"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "Don't have good ideas if you aren't willing to be responsible for them.",
    "uuid": "300a997aec21",
    "publish_date": "2011-09-15 10:44:21",
    "authors": ["Alan J. Perlis"],
    "authors_uuid": ["37c5afe528d6"],
    "tags_uuid": ["a7b1d0526611"],
    "tags": ["ideas"]
  },
  {
    "body": "The sooner you start to code, the longer the program will take.",
    "uuid": "bcf76467b997",
    "publish_date": "2011-09-15 10:45:31",
    "authors": ["Roy Carlson"],
    "authors_uuid": ["55f2d2bb0fc1"],
    "tags_uuid": ["46278bd60154", "2e471af7f345"],
    "tags": ["programming", "estimating"]
  },
  {
    "body": "Incorrect documentation is often worse than no documentation.",
    "uuid": "73ac442d3317",
    "publish_date": "2011-10-05 07:36:28",
    "authors": ["Bertrand Meyer"],
    "authors_uuid": ["1bad4873b494"],
    "tags_uuid": ["4a87a65f9b7a"],
    "tags": ["documentation"]
  },
  {
    "body": "The longer it takes for a bug to surface, the harder it is to find.",
    "uuid": "97e65fa7af62",
    "publish_date": "2011-10-05 07:37:30",
    "authors": ["Roedy Green"],
    "authors_uuid": ["f182ec7250c8"],
    "tags_uuid": ["bd67f2b3cd5c"],
    "tags": ["bugs"]
  },
  {
    "body": "The cardinal rule of writing unmaintainable code is to specify each fact in as many places as possible and in as many ways as possible.",
    "uuid": "55d810a4e35d",
    "publish_date": "2011-10-05 07:38:50",
    "authors": ["Roedy Green"],
    "authors_uuid": ["f182ec7250c8"],
    "tags_uuid": ["fc973eebe544", "ffe7dc59094f"],
    "tags": ["specification", "maintenance"]
  },
  {
    "body": "The code you write makes you a programmer. The code you delete makes you a good one. The code you don't have to write makes you a great one.",
    "uuid": "52a785c70bd8",
    "publish_date": "2011-10-05 07:41:16",
    "authors": ["Mario Fusco"],
    "authors_uuid": ["c8338b8ec3d1"],
    "tags_uuid": ["16d05f8e5421", "ba763cdd445a", "df01cc3ecc20"],
    "tags": ["programmers", "complexity", "productivity"]
  },
  {
    "body": "If you give someone a program, you will frustrate them for a day; if you teach them how to program, you will frustrate them for a lifetime.",
    "uuid": "cf89c538b6b1",
    "publish_date": "2011-10-05 07:43:35",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "The most obvious common ‘personality’ characteristics of hackers are high intelligence, consuming curiosity, and facility with intellectual abstractions. Also, most hackers are ‘neophiles’, stimulated by and appreciative of novelty (especially intellectual novelty). Most are also relatively individualistic and anti-conformist.",
    "uuid": "a180ff5743fb",
    "publish_date": "2011-10-07 07:11:46",
    "authors": ["Eric Raymond"],
    "authors_uuid": ["67f54a69ab2d"],
    "tags_uuid": ["16d05f8e5421", "047dace4e198"],
    "tags": ["programmers", "hackers"]
  },
  {
    "body": "XML documents are much like humans &mdash; they are cute and fun to deal with when they’re small but can get really annoying as they grow bigger.",
    "uuid": "8dcefda0fcf6",
    "publish_date": "2011-10-16 11:18:39",
    "authors": ["Andy Hunt"],
    "authors_uuid": ["187171c0d7c4"],
    "tags_uuid": ["4a2e5d5f57fe"],
    "tags": ["xml"]
  },
  {
    "body": "A computer lets you make more mistakes faster than any other invention in human history, with the possible exceptions of handguns and tequila.",
    "uuid": "d167b3d73cef",
    "publish_date": "2011-11-29 13:43:15",
    "authors": ["Mitch Ratcliffe"],
    "authors_uuid": ["8167033c3e1c"],
    "tags_uuid": ["b85badf703f2"],
    "tags": ["computers"]
  },
  {
    "body": "I love deadlines. I like the whooshing sound they make as they fly by.",
    "uuid": "b55e122b5cf0",
    "publish_date": "2011-11-29 13:46:23",
    "authors": ["Douglas Adams"],
    "authors_uuid": ["bfc694ae69d3"],
    "tags_uuid": ["fb490e03fd2c"],
    "tags": ["deadlines"]
  },
  {
    "body": "Saying that Java is good because it works on all platforms is like saying anal sex is good because it works on all genders.",
    "uuid": "76fb617e10ff",
    "publish_date": "2011-11-29 13:47:23",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["4cf901231140"],
    "tags": ["java"]
  },
  {
    "body": "XML is like violence – if it doesn’t solve your problems, you are not using enough of it.",
    "uuid": "7282d919e23a",
    "publish_date": "2011-11-29 13:48:07",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["4a2e5d5f57fe"],
    "tags": ["xml"]
  },
  {
    "body": "Features, quality, time: pick two.",
    "uuid": "c4d00cad5dc8",
    "publish_date": "2011-11-29 13:49:18",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["fc973eebe544", "2e471af7f345"],
    "tags": ["specification", "estimating"]
  },
  {
    "body": "Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.",
    "uuid": "f3a4b2246d6f",
    "publish_date": "2011-12-08 09:16:13",
    "authors": ["Alan Kay"],
    "authors_uuid": ["08a42b591dc3"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "Computers are like bikinis. They save people a lot of guesswork.",
    "uuid": "33263cf4e13e",
    "publish_date": "2011-12-08 09:18:10",
    "authors": ["Sam Ewing"],
    "authors_uuid": ["df6847873913"],
    "tags_uuid": ["b85badf703f2"],
    "tags": ["computers"]
  },
  {
    "body": "That’s what’s cool about working with computers. They don’t argue, they remember everything, and they don’t drink all your beer.",
    "uuid": "faab90c1f380",
    "publish_date": "2011-12-08 09:21:36",
    "authors": ["Paul Leary"],
    "authors_uuid": ["bad026ef1279"],
    "tags_uuid": ["b85badf703f2"],
    "tags": ["computers"]
  },
  {
    "body": "Hardware: the parts of a computer system that can be kicked.",
    "uuid": "1a0ac282c9c6",
    "publish_date": "2011-12-08 09:23:15",
    "authors": ["Jeff Pesis"],
    "authors_uuid": ["51e84e41cf40"],
    "tags_uuid": ["ee3f63e63e4d"],
    "tags": ["hardware"]
  },
  {
    "body": "Any fool can use a computer. Many do.",
    "uuid": "2baa70c3cb98",
    "publish_date": "2011-12-08 09:26:54",
    "authors": ["Ted Nelson"],
    "authors_uuid": ["10651f0f3985"],
    "tags_uuid": ["fdcfd016c9e7"],
    "tags": ["users"]
  },
  {
    "body": "There are only two industries that refer to their customers as &ldquo;users&rdquo;.",
    "uuid": "fc08b79850c6",
    "publish_date": "2011-12-08 09:27:58",
    "authors": ["Edward Tufte"],
    "authors_uuid": ["674e3b102cf7"],
    "tags_uuid": ["fdcfd016c9e7"],
    "tags": ["users"]
  },
  {
    "body": "Optimism is an occupational hazard of programming; feedback is the treatment.",
    "uuid": "c82ddbb8f681",
    "publish_date": "2011-12-08 09:29:19",
    "authors": ["Kent Beck"],
    "authors_uuid": ["7b5113d7f9a5"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "We build systems like the Wright brothers built airplanes &mdash; build the whole thing, push it off the cliff, let it crash, and start over again.",
    "uuid": "f5b8de6764b4",
    "publish_date": "2011-12-12 10:33:39",
    "authors": ["Nato Software Engineering Conference '68"],
    "authors_uuid": ["8a5f640b51ad"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "In the end, regardless of where you are on the development hierarchy, keep coding. It’s where you’re most valuable.",
    "uuid": "180555d1d7ac",
    "publish_date": "2011-12-15 08:58:27",
    "authors": ["The Developer's Code"],
    "authors_uuid": ["9a03084cf1c3"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "JavaScript is the only language that I’m aware of that people feel they don’t need to learn before they start using it.",
    "uuid": "7849d13a825c",
    "publish_date": "2012-01-09 10:24:21",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["15ddd6ce025e", "2e662c7bed7a"],
    "tags": ["javascript", "languages"]
  },
  {
    "body": "The secret to building large apps is never build large apps. Break your applications into small pieces. Then, assemble those testable, bite-sized pieces into your big application.",
    "uuid": "a65ec5fc068e",
    "publish_date": "2012-02-13 05:10:49",
    "authors": ["Justin Meyer"],
    "authors_uuid": ["e6e7edef9669"],
    "tags_uuid": ["fc973eebe544", "ba763cdd445a", "cfac42388f9d"],
    "tags": ["specification", "complexity", "softwares"]
  },
  {
    "body": "This is essentially what a program was, a love letter from the programmer to the hardware, full of the intimate details known only to partners in an affair.",
    "uuid": "e7633cf57998",
    "publish_date": "2012-02-14 06:13:08",
    "authors": ["Michael Marcotty"],
    "authors_uuid": ["8347ae2b13f5"],
    "tags_uuid": ["46278bd60154", "16d05f8e5421"],
    "tags": ["programming", "programmers"]
  },
  {
    "body": "Later equals never.",
    "uuid": "4085011753d1",
    "publish_date": "2012-02-25 06:34:07",
    "authors": ["Le Blanc's law"],
    "authors_uuid": ["c25d2ce2fd3c"],
    "tags_uuid": ["2e471af7f345"],
    "tags": ["estimating"]
  },
  {
    "body": "The older I get, the more I believe that the only way to become a better programmer is by not programming.",
    "uuid": "e2ae8a62bece",
    "publish_date": "2012-06-11 08:42:43",
    "authors": ["Jeff Atwood"],
    "authors_uuid": ["6591f999f41a"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "It would be nice if products and programming languages were designed to have only good parts.",
    "uuid": "87cc88ee789d",
    "publish_date": "2012-07-22 19:42:46",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "You won't get anything done by planning.",
    "uuid": "375996d4eafd",
    "publish_date": "2013-02-21 11:31:47",
    "authors": ["Karl Pilkington"],
    "authors_uuid": ["e57c95c33382"],
    "tags_uuid": ["8f1778e044f7", "7ea02d81a2d0"],
    "tags": ["management", "planning"]
  },
  {
    "body": "Any app that can be written in JavaScript, will eventually be written in JavaScript.",
    "uuid": "934b13526385",
    "publish_date": "2013-03-18 08:04:48",
    "authors": ["Jeff Atwood"],
    "authors_uuid": ["6591f999f41a"],
    "tags_uuid": ["15ddd6ce025e"],
    "tags": ["javascript"]
  },
  {
    "body": "Good programmers don't just write programs. They build a working vocabulary.",
    "uuid": "35acf29ee059",
    "publish_date": "2013-04-18 13:11:19",
    "authors": ["Guy Steele"],
    "authors_uuid": ["da2de2da7269"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Hiring bad developers is like drinking seawater. It seems to satisfy a need while actually increasing it.",
    "uuid": "2035f94652ad",
    "publish_date": "2013-05-23 14:44:43",
    "authors": ["Michael Nygard"],
    "authors_uuid": ["e6c7b4170a44"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "All programming languages are shit. But the good ones fertilize your mind.",
    "uuid": "00ad98c27e29",
    "publish_date": "2013-06-18 14:38:34",
    "authors": ["Reg Braithwaite"],
    "authors_uuid": ["7646b9c89f3e"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "Hope is not a plan.",
    "uuid": "090d08cc91e1",
    "publish_date": "2013-07-18 16:34:39",
    "authors": ["Jonathan Rosenberg"],
    "authors_uuid": ["4cee8c830a0b"],
    "tags_uuid": ["7ea02d81a2d0"],
    "tags": ["planning"]
  },
  {
    "body": "At some point software design becomes less about what and more about when.",
    "uuid": "d4e2254173ae",
    "publish_date": "2013-08-01 07:50:44",
    "authors": ["Kent Beck"],
    "authors_uuid": ["7b5113d7f9a5"],
    "tags_uuid": ["7ea02d81a2d0"],
    "tags": ["planning"]
  },
  {
    "body": "Programming uses head and gut.",
    "uuid": "e457620bf219",
    "publish_date": "2013-09-05 11:52:20",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "&ldquo;That hardly ever happens&rdquo; is another way of saying &ldquo;it happens&rdquo;.",
    "uuid": "7f96137d5951",
    "publish_date": "2013-09-05 11:52:52",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["bd67f2b3cd5c"],
    "tags": ["bugs"]
  },
  {
    "body": "If there is a feature of a language that is sometimes problematic, and if it can be replaced with another feature that is more reliable, then always use the more reliable feature.",
    "uuid": "40a0cc8c3443",
    "publish_date": "2013-09-05 11:58:31",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "One of the best programming skills you can have is knowing when to walk away for awhile.",
    "uuid": "48ae3b1133ff",
    "publish_date": "2013-10-14 09:07:01",
    "authors": ["Oscar Godson"],
    "authors_uuid": ["ec3e45033a29"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Linux is only free if your time has no value.",
    "uuid": "1c5f85133896",
    "publish_date": "2014-02-10 06:02:39",
    "authors": ["Jamie Zawinski"],
    "authors_uuid": ["5b88df92a025"],
    "tags_uuid": ["28e76eb259cb"],
    "tags": ["linux"]
  },
  {
    "body": "The proper use of comments is to compensate for our failure to express ourself in code.",
    "uuid": "e3956141f3fd",
    "publish_date": "2014-03-30 03:47:43",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["8f1619347921"],
    "tags": ["commenting"]
  },
  {
    "body": "If we have data, let’s look at data. If all we have are opinions, let’s go with mine.",
    "uuid": "abd0b9e6e5b0",
    "publish_date": "2014-03-31 21:18:05",
    "authors": ["Jim Barksdale"],
    "authors_uuid": ["4e3948c2f118"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "The most secure code in the world is code which is never written.",
    "uuid": "7a77cfb9fd70",
    "publish_date": "2014-04-09 20:11:17",
    "authors": ["Colin Percival"],
    "authors_uuid": ["379a8c87ebdd"],
    "tags_uuid": ["90ce12eb53bb"],
    "tags": ["security"]
  },
  {
    "body": "Sometimes, the elegant implementation is just a function. Not a method. Not a class. Not a framework. Just a function.",
    "uuid": "9c1c086c134b",
    "publish_date": "2014-04-10 17:18:43",
    "authors": ["John Carmack"],
    "authors_uuid": ["aaebabb8c61b"],
    "tags_uuid": ["f1ff3769767f"],
    "tags": ["functions"]
  },
  {
    "body": "The strength of JavaScript is that you can do anything. The weakness is that you will.",
    "uuid": "1a560a3318e7",
    "publish_date": "2014-04-10 18:57:19",
    "authors": ["Reg Braithwaite"],
    "authors_uuid": ["7646b9c89f3e"],
    "tags_uuid": ["15ddd6ce025e"],
    "tags": ["javascript"]
  },
  {
    "body": "Write code every day.",
    "uuid": "61556b3360cf",
    "publish_date": "2014-04-13 07:07:47",
    "authors": ["John Resig"],
    "authors_uuid": ["c592f7ed399b"],
    "tags_uuid": ["df01cc3ecc20"],
    "tags": ["productivity"]
  },
  {
    "body": "Sure I could program in PHP, but I could also use a sundial to tell time.",
    "uuid": "7563cfcd7091",
    "publish_date": "2014-04-14 16:21:09",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["8ea8b10f34b0"],
    "tags": ["php"]
  },
  {
    "body": "The first step of any project is to grossly underestimate its complexity and difficulty.",
    "uuid": "99e8fbb5d4af",
    "publish_date": "2014-04-20 01:28:07",
    "authors": ["Nicoll Hunt"],
    "authors_uuid": ["050df2248497"],
    "tags_uuid": ["2e471af7f345", "7ea02d81a2d0", "8f1778e044f7"],
    "tags": ["estimating", "planning", "management"]
  },
  {
    "body": "Node.js is a tumor on the programming community, in that not only is it completely braindead, but the people who use it go on to infect other people who can't think for themselves.",
    "uuid": "628bdfe6c783",
    "publish_date": "2014-04-20 23:05:43",
    "authors": ["Ted Dziuba"],
    "authors_uuid": ["00e1b5611f6e"],
    "tags_uuid": ["f3ee838fd06a", "15ddd6ce025e"],
    "tags": ["nodejs", "javascript"]
  },
  {
    "body": "The problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.",
    "uuid": "fa281c957173",
    "publish_date": "2014-04-20 23:16:24",
    "authors": ["Joe Armstrong", "Jason Gorman"],
    "authors_uuid": ["348952090cb3", "1cbf19d62ce5"],
    "tags_uuid": ["3e7aeeca901a"],
    "tags": ["oop"]
  },
  {
    "body": "Object-oriented design is the roman numerals of computing.",
    "uuid": "1aee0254180e",
    "publish_date": "2014-04-20 23:24:52",
    "authors": ["Rob Pike"],
    "authors_uuid": ["569cfb601ec7"],
    "tags_uuid": ["3e7aeeca901a"],
    "tags": ["oop"]
  },
  {
    "body": "The most important property of a program is whether it accomplishes the intention of its user.",
    "uuid": "f1e2f3a8e72c",
    "publish_date": "2014-04-22 02:20:58",
    "authors": ["C. A. R. Hoare"],
    "authors_uuid": ["a6bd6d72ec53"],
    "tags_uuid": ["fdcfd016c9e7", "fc973eebe544", "cfac42388f9d"],
    "tags": ["users", "specification", "softwares"]
  },
  {
    "body": "You cannot manage that which you cannot measure.",
    "uuid": "173faaedeb69",
    "publish_date": "2014-04-22 02:24:17",
    "authors": ["Jim Barksdale"],
    "authors_uuid": ["4e3948c2f118"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "Nine people can’t make a baby in a month.",
    "uuid": "ef7bd619d50b",
    "publish_date": "2014-04-22 17:53:05",
    "authors": ["Frederick P. Brooks"],
    "authors_uuid": ["583742cadc21"],
    "tags_uuid": ["16d05f8e5421", "df01cc3ecc20"],
    "tags": ["programmers", "productivity"]
  },
  {
    "body": "Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.",
    "uuid": "188353f216dd",
    "publish_date": "2014-04-22 17:54:21",
    "authors": ["Brian W. Kernighan"],
    "authors_uuid": ["0086884ef4b1"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "When debugging, novices insert corrective code; experts remove defective code.",
    "uuid": "7924408a67e0",
    "publish_date": "2014-04-22 17:54:57",
    "authors": ["Richard Pattis"],
    "authors_uuid": ["94f163549a90"],
    "tags_uuid": ["21d9e61717db"],
    "tags": ["debugging"]
  },
  {
    "body": "One of my most productive days was throwing away 1000 lines of code.",
    "uuid": "5280d25d5d15",
    "publish_date": "2014-04-22 17:56:57",
    "authors": ["Ken Thompson"],
    "authors_uuid": ["fb43ec2030e5"],
    "tags_uuid": ["df01cc3ecc20", "2806ae712337"],
    "tags": ["productivity", "refactoring"]
  },
  {
    "body": "If builders built buildings the way programmers wrote programs, then the first woodpecker that came along would destroy civilization.",
    "uuid": "c4ed5d5cc892",
    "publish_date": "2014-04-22 17:58:34",
    "authors": ["Gerald Weinberg"],
    "authors_uuid": ["585511a266f7"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "If Java had true garbage collection, most programs would delete themselves upon execution.",
    "uuid": "67a5a54f7cf4",
    "publish_date": "2014-04-23 04:51:35",
    "authors": ["Robert Sewell"],
    "authors_uuid": ["46458390f521"],
    "tags_uuid": ["4cf901231140", "2e662c7bed7a"],
    "tags": ["java", "languages"]
  },
  {
    "body": "Perl: The only language that looks the same before and after RSA encryption.",
    "uuid": "a82104be5218",
    "publish_date": "2014-04-23 04:53:22",
    "authors": ["Keith Bostic"],
    "authors_uuid": ["fd8dc9d83f31"],
    "tags_uuid": ["91d538929d2d", "2e662c7bed7a"],
    "tags": ["perl", "languages"]
  },
  {
    "body": "[Most managers] may defend the schedule and requirements with passion; but that’s their job. It’s your job to defend the code with equal passion.",
    "uuid": "d921d7128103",
    "publish_date": "2014-04-23 04:54:57",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "Talk is cheap. Show me the code.",
    "uuid": "c8038d1bdd4b",
    "publish_date": "2014-04-23 04:57:21",
    "authors": ["Linus Torvalds"],
    "authors_uuid": ["8491fd3f9c47"],
    "tags_uuid": ["df01cc3ecc20"],
    "tags": ["productivity"]
  },
  {
    "body": "In many ways, the prism of computer science is harmful for the development of information systems.",
    "uuid": "e13868a91d9a",
    "publish_date": "2014-04-23 15:45:39",
    "authors": ["David Heinemeier Hansson"],
    "authors_uuid": ["a93c1717ba57"],
    "tags_uuid": ["490b10b26569"],
    "tags": ["computer science"]
  },
  {
    "body": "Just because something is easy to measure doesn't mean it's important.",
    "uuid": "aa8a75766ae3",
    "publish_date": "2014-04-23 15:54:27",
    "authors": ["David Heinemeier Hansson"],
    "authors_uuid": ["a93c1717ba57"],
    "tags_uuid": ["059448510113"],
    "tags": ["metrics"]
  },
  {
    "body": "You do not really understand something unless you can explain it to your grandmother.",
    "uuid": "3086d3953998",
    "publish_date": "2014-04-23 19:10:22",
    "authors": ["Albert Einstein"],
    "authors_uuid": ["e62103ae06af"],
    "tags_uuid": ["ba763cdd445a", "a7b1d0526611"],
    "tags": ["complexity", "ideas"]
  },
  {
    "body": "Simple doesn't mean stupid. Thinking that it does, does.",
    "uuid": "d20940fbefbc",
    "publish_date": "2014-04-23 19:11:38",
    "authors": ["Paul Krugman"],
    "authors_uuid": ["688a0d2e0d9c"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Tests are the Programmer’s stone, transmuting fear into boredom.",
    "uuid": "aee1c599b562",
    "publish_date": "2014-04-27 19:57:32",
    "authors": ["Kent Beck"],
    "authors_uuid": ["7b5113d7f9a5"],
    "tags_uuid": ["433a3a423cd9"],
    "tags": ["testing"]
  },
  {
    "body": "No matter how slick the demo is in rehearsal, when you do it in front of a live audience the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved.",
    "uuid": "45a891dd66d8",
    "publish_date": "2014-04-28 19:59:40",
    "authors": ["Mark Gibbs"],
    "authors_uuid": ["cc01e4592d23"],
    "tags_uuid": ["d18c1b030691", "bd67f2b3cd5c"],
    "tags": ["beta", "bugs"]
  },
  {
    "body": "Rails has done more for startups than a whole boatload of Venture Capitalists.",
    "uuid": "f91c36197fab",
    "publish_date": "2014-04-29 03:51:30",
    "authors": ["Eric Ries"],
    "authors_uuid": ["ed3a55c74b2e"],
    "tags_uuid": ["2a30e3a0c76d"],
    "tags": ["ruby on rails"]
  },
  {
    "body": "If McDonald's were run like a software company, one out of every hundred Big Macs would give you food poisoning, and the response would be, &ldquo;We're sorry, here is a coupon for two more&rdquo;.",
    "uuid": "e52b77cae163",
    "publish_date": "2014-04-30 05:07:07",
    "authors": ["Mark Minasi"],
    "authors_uuid": ["1cf1766ef465"],
    "tags_uuid": ["cfac42388f9d", "bd67f2b3cd5c"],
    "tags": ["softwares", "bugs"]
  },
  {
    "body": "When in doubt, use brute force.",
    "uuid": "60b000519248",
    "publish_date": "2014-04-30 18:35:30",
    "authors": ["Ken Thompson"],
    "authors_uuid": ["fb43ec2030e5"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defence against complexity.",
    "uuid": "2d6bcc8e148c",
    "publish_date": "2014-04-30 18:36:28",
    "authors": ["David Gelernter"],
    "authors_uuid": ["30b50d2e8012"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "First do it, then do it right, then do it better.",
    "uuid": "22dfb7af95f6",
    "publish_date": "2014-05-02 04:40:46",
    "authors": ["Addy Osmani"],
    "authors_uuid": ["114e5d617487"],
    "tags_uuid": ["df01cc3ecc20", "a7b1d0526611", "46278bd60154"],
    "tags": ["productivity", "ideas", "programming"]
  },
  {
    "body": "The best way to prepare [to be a programmer] is to write programs, and to study great programs that other people have written. In my case, I went to the garbage cans at the Computer Science Center and fished out listings of their operating system.",
    "uuid": "e063f5410e1e",
    "publish_date": "2014-05-03 16:16:56",
    "authors": ["Bill Gates"],
    "authors_uuid": ["c75df3e851bf"],
    "tags_uuid": ["2b9f3f49e7cc"],
    "tags": ["learning"]
  },
  {
    "body": "Users who want critical bug fixes and new features without actually upgrading their software also want magic flying candy-dropping ponies.",
    "uuid": "1c6814a839f6",
    "publish_date": "2014-05-04 01:57:17",
    "authors": ["chromatic"],
    "authors_uuid": ["d340827dc495"],
    "tags_uuid": ["5984190a8f7f", "fdcfd016c9e7"],
    "tags": ["features", "users"]
  },
  {
    "body": "Feature-based releases expand to fill all available time until someone feels guilty for not finishing the feature on a magical, wish-fulfillment schedule, and hey, has it been a couple of years already?",
    "uuid": "4785cf31ea01",
    "publish_date": "2014-05-04 03:37:13",
    "authors": ["chromatic"],
    "authors_uuid": ["d340827dc495"],
    "tags_uuid": ["5984190a8f7f", "974e5bc2686a", "7ea02d81a2d0"],
    "tags": ["features", "releasing", "planning"]
  },
  {
    "body": "Do not use humans for jobs computers can do better &mdash; this is a waste of human energy and creativity, the only real resource on this planet, and demeans the human spirit.",
    "uuid": "0fb69abd8de3",
    "publish_date": "2014-05-22 14:23:41",
    "authors": ["J. Paul Morrison"],
    "authors_uuid": ["779d5828b7ac"],
    "tags_uuid": ["b85badf703f2", "b5cf00a461cc"],
    "tags": ["computers", "creativity"]
  },
  {
    "body": "A generalist is a jack-of-all-trades but a master of none, whereas a generalizing specialist is a jack-of-all-trades and master of a few. Big difference.",
    "uuid": "e3de252b9c12",
    "publish_date": "2014-05-26 14:21:05",
    "authors": ["Scott Ambler"],
    "authors_uuid": ["6d07dad54e74"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "A human being should be able to change a diaper, plan an invasion, butcher a hog, conn a ship, design a building, write a sonnet, balance accounts, build a wall, set a bone, comfort the dying, take orders, give orders, cooperate, act alone, solve equations, analyze a new problem, pitch manure, program a computer, cook a tasty meal, fight efficiently, die gallantly. Specialization is for insects.",
    "uuid": "be22120f0692",
    "publish_date": "2014-05-26 14:55:54",
    "authors": ["Robert A. Heinlein"],
    "authors_uuid": ["fc77a33d1938"],
    "tags_uuid": ["346462cb944b", "16d05f8e5421"],
    "tags": ["specialization", "programmers"]
  },
  {
    "body": "The amount of energy necessary to refute bullshit is an order of magnitude bigger than to produce it.",
    "uuid": "c67b6f4f6b04",
    "publish_date": "2014-05-28 14:53:09",
    "authors": ["Alberto Brandolini"],
    "authors_uuid": ["8fb4cdc2b11d"],
    "tags_uuid": ["a7b1d0526611"],
    "tags": ["ideas"]
  },
  {
    "body": "Not all eyes that notice bugs in Open Source code belong to saints who will report or repair them in the interest of the public good.",
    "uuid": "9b7335d276f4",
    "publish_date": "2014-06-04 09:20:37",
    "authors": ["Martin Fowler"],
    "authors_uuid": ["721333935c91"],
    "tags_uuid": ["bd67f2b3cd5c", "85a5237e6484"],
    "tags": ["bugs", "open source"]
  },
  {
    "body": "It's a lot easier to talk about code than it is to write code.",
    "uuid": "1fecbda5ee97",
    "publish_date": "2014-06-17 10:11:05",
    "authors": ["John O'Nolan"],
    "authors_uuid": ["837ee73bb5f5"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "If you are choosing a JavaScript library purely based on popularity, I think you deserve what you get.",
    "uuid": "659ed0b653d7",
    "publish_date": "2014-07-10 12:55:44",
    "authors": ["Tom Dale"],
    "authors_uuid": ["377fa7385f75"],
    "tags_uuid": ["15ddd6ce025e"],
    "tags": ["javascript"]
  },
  {
    "body": "What exactly makes a great platform? It’s about what your business puts into its platform and what your consumers and/or business partners get out of it. And that’s the point. A platform either fits into an overall corporate strategy or it doesn’t.",
    "uuid": "12541276c052",
    "publish_date": "2014-10-02 07:55:49",
    "authors": ["Phil Simon"],
    "authors_uuid": ["6aa66a28622c"],
    "tags_uuid": ["76af4d7121a0", "f18dd71ac5e2"],
    "tags": ["corporate", "platform"]
  },
  {
    "body": "Easy is not to be underestimated. Easy taps the pool of talent and ideas out there that were turned off by hard.",
    "uuid": "a8e45a9ecde7",
    "publish_date": "2014-10-03 09:16:05",
    "authors": ["Chris Anderson"],
    "authors_uuid": ["5a116988ee0f"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Most of the biggest problems in software are problems of misconception.",
    "uuid": "8757ea13cf07",
    "publish_date": "2014-10-06 07:10:47",
    "authors": ["Rich Hickey"],
    "authors_uuid": ["32618e73c289"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "As a Lead JavaScript Engineer, I try to get my team to write as little JavaScript as possible.",
    "uuid": "f8349ff66ef1",
    "publish_date": "2014-10-06 11:53:29",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["15ddd6ce025e"],
    "tags": ["javascript"]
  },
  {
    "body": "Get out of the way of your developers or lose them to someone who will.",
    "uuid": "b495dbf39e9a",
    "publish_date": "2014-10-06 16:25:12",
    "authors": ["Adrian Cockcroft"],
    "authors_uuid": ["b5a25ddb1e4d"],
    "tags_uuid": ["8f1778e044f7", "16d05f8e5421"],
    "tags": ["management", "programmers"]
  },
  {
    "body": "A person without data is just another person with an opinion.",
    "uuid": "91eebc0361a5",
    "publish_date": "2014-10-07 15:50:17",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["059448510113", "65df1e9ae843", "8f1778e044f7"],
    "tags": ["metrics", "data", "management"]
  },
  {
    "body": "Programs, like people, get old. We can’t prevent ageing, but we can understand its causes, limit its effects and reverse some of the damage.",
    "uuid": "f2d17e0a52c5",
    "publish_date": "2014-10-14 12:41:45",
    "authors": ["Mario Fusco"],
    "authors_uuid": ["c8338b8ec3d1"],
    "tags_uuid": ["ffe7dc59094f", "ba763cdd445a", "cfac42388f9d"],
    "tags": ["maintenance", "complexity", "softwares"]
  },
  {
    "body": "If you're actually doing TDD, you're throwing away tests all the time, as your understanding of what the code is changes.",
    "uuid": "9a938b1c916e",
    "publish_date": "2014-10-21 10:54:20",
    "authors": ["Kerri Miller"],
    "authors_uuid": ["6bbd8de9ccd6"],
    "tags_uuid": ["433a3a423cd9", "e8e63fda46b9"],
    "tags": ["testing", "tdd"]
  },
  {
    "body": "Simplicity is about subtracting the obvious and adding the meaningful.",
    "uuid": "da93a8d2d40c",
    "publish_date": "2014-10-31 09:20:02",
    "authors": ["John Maeda"],
    "authors_uuid": ["871bdf83f01d"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Programmers are as emotional and irrational as normal people.",
    "uuid": "fb64c7208871",
    "publish_date": "2014-10-31 09:39:36",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Blame the implementation, not the technique.",
    "uuid": "72cc1bc2504c",
    "publish_date": "2014-11-14 13:39:26",
    "authors": ["Tim Kadlec"],
    "authors_uuid": ["0a752591e4d5"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "What matters for simplicity is that there's not interleaving.",
    "uuid": "2d556767a979",
    "publish_date": "2014-11-17 07:52:29",
    "authors": ["Rich Hickey"],
    "authors_uuid": ["32618e73c289"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible.",
    "uuid": "37b103aa0a82",
    "publish_date": "2014-11-17 07:53:59",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Scrum is like the rules of soccer. Following them does not make you a good player.",
    "uuid": "acc92d3aa1bd",
    "publish_date": "2014-12-16 14:07:56",
    "authors": ["Jeff Sutherland"],
    "authors_uuid": ["9d08117648e7"],
    "tags_uuid": ["c55d7403e7a8", "ae64acaacfab"],
    "tags": ["agile", "scrum"]
  },
  {
    "body": "Writing software as if we are the only person that ever has to comprehend it is one of the biggest mistakes and false assumptions that can be made.",
    "uuid": "c7e72839e706",
    "publish_date": "2015-02-08 01:44:50",
    "authors": ["Karolina Szczur"],
    "authors_uuid": ["59427dea9585"],
    "tags_uuid": ["16d05f8e5421", "37c8e96b9db0"],
    "tags": ["programmers", "collaboration"]
  },
  {
    "body": "The craft of programming begins with empathy, not formatting or languages or tools or algorithms or data structures.",
    "uuid": "1c5c257b858c",
    "publish_date": "2015-02-13 11:58:49",
    "authors": ["Kent Beck"],
    "authors_uuid": ["7b5113d7f9a5"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "I hate code, and I want as little of it as possible in our product.",
    "uuid": "99ec1b114133",
    "publish_date": "2015-02-14 13:38:23",
    "authors": ["Jack Diederich"],
    "authors_uuid": ["d5b6553f772b"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "It's important to remember that when you start from scratch there is absolutely no reason to believe that you are going to do a better job than you did the first time. First of all, you probably don't even have the same programming team that worked on version one, so you don't actually have &ldquo;more experience&rdquo;. You're just going to make most of the old mistakes again, and introduce some new problems that weren't in the original version.",
    "uuid": "b9ebe0833814",
    "publish_date": "2015-02-14 13:41:52",
    "authors": ["Joel Spolsky"],
    "authors_uuid": ["22236409daf2"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "The key is to acknowledge from the start that you have no idea how this will grow. When you accept that you don't know everything, you begin to design the system defensively... You should spend most of your time thinking about interfaces rather than implementations.",
    "uuid": "fb66529c9789",
    "publish_date": "2015-02-14 13:43:37",
    "authors": ["Nicholas Zakas"],
    "authors_uuid": ["0d77c9a33876"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "A program is like a poem: you cannot write a poem without writing it.",
    "uuid": "8b2cccdc8af4",
    "publish_date": "2015-02-15 10:42:07",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Security is a state of mind.",
    "uuid": "6d1a3cc9f2fd",
    "publish_date": "2015-02-15 10:43:17",
    "authors": ["NSA Security Manual"],
    "authors_uuid": ["4a9171674619"],
    "tags_uuid": ["90ce12eb53bb"],
    "tags": ["security"]
  },
  {
    "body": "Languages that try to disallow idiocy become themselves idiotic.",
    "uuid": "619ce45c1432",
    "publish_date": "2015-02-15 10:44:45",
    "authors": ["Rob Pike"],
    "authors_uuid": ["569cfb601ec7"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "When in doubt, leave it out.",
    "uuid": "f0a9ec0f9a38",
    "publish_date": "2015-02-15 10:47:18",
    "authors": ["Joshua Bloch"],
    "authors_uuid": ["7eaa626354f6"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "No code is faster than no code.",
    "uuid": "c3c565580dd6",
    "publish_date": "2015-02-15 10:47:45",
    "authors": ["merb motto"],
    "authors_uuid": ["2a5f2936ca3a"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Data dominates. If you’ve chosen the right data structures and organized things well, the algorithms will almost always be self-evident. Data structures, not algorithms, are central to programming.",
    "uuid": "79afad17d469",
    "publish_date": "2015-02-15 11:44:15",
    "authors": ["Rob Pike"],
    "authors_uuid": ["569cfb601ec7"],
    "tags_uuid": ["65df1e9ae843"],
    "tags": ["data"]
  },
  {
    "body": "The best reaction to &ldquo;this is confusing, where are the docs&rdquo; is to rewrite the feature to make it less confusing, not write more docs.",
    "uuid": "e63c78fffc10",
    "publish_date": "2015-02-16 15:25:03",
    "authors": ["Jeff Atwood"],
    "authors_uuid": ["6591f999f41a"],
    "tags_uuid": ["4a87a65f9b7a"],
    "tags": ["documentation"]
  },
  {
    "body": "Treat your code like poetry and take it to the edge of the bare minimum.",
    "uuid": "f3f60a148687",
    "publish_date": "2015-02-17 04:40:11",
    "authors": ["Ilyo"],
    "authors_uuid": ["9ff55a2cedf2"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "There is no single development, in either technology or management\ntechnique, which by itself promises even one order-of-magnitude\nimprovement within a decade in productivity, in reliability, in simplicity.",
    "uuid": "676ccdf6cd58",
    "publish_date": "2015-02-17 14:15:54",
    "authors": ["Frederick P. Brooks"],
    "authors_uuid": ["583742cadc21"],
    "tags_uuid": ["df01cc3ecc20"],
    "tags": ["productivity"]
  },
  {
    "body": "And the reason these things take a generation is because ultimately we do not change people's minds. We have to wait for the previous generation to retire or die before we can get critical mass on the next idea. So it's like we look around: &ldquo;Are they gone?&rdquo;",
    "uuid": "7889a22833c1",
    "publish_date": "2015-02-18 13:26:05",
    "authors": ["Douglas Crockford"],
    "authors_uuid": ["2cfce23b8710"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "body": "Big data is like teenage sex: everyone talks about it, nobody really knows how to do it, everyone thinks everyone else is doing it, so everyone claims they are doing it...",
    "uuid": "0d36454ff9f2",
    "publish_date": "2015-04-01 13:54:18",
    "authors": ["Dan Ariely"],
    "authors_uuid": ["e052ba2d029a"],
    "tags_uuid": ["65df1e9ae843"],
    "tags": ["data"]
  },
  {
    "body": "Good engineers make solutions obsolete. Great engineers make themselves obsolete.",
    "uuid": "d86f04835f65",
    "publish_date": "2015-04-08 02:39:23",
    "authors": ["Jordan W"],
    "authors_uuid": ["c44284f67131"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Organizations which design systems are constrained to produce designs which are copies of the communication structures of these organizations.",
    "uuid": "e9b36c831b9b",
    "publish_date": "2015-04-22 07:28:04",
    "authors": ["Conway's law"],
    "authors_uuid": ["887f284c1035"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Always bet on JavaScript.",
    "uuid": "043cf96383a9",
    "publish_date": "2015-06-03 17:00:05",
    "authors": ["Brendan Eich"],
    "authors_uuid": ["74187cefc1fe"],
    "tags_uuid": ["15ddd6ce025e"],
    "tags": ["javascript"]
  },
  {
    "body": "Things that are impossible just take longer.",
    "uuid": "aa42eefd03ed",
    "publish_date": "2015-06-03 17:02:17",
    "authors": ["Ian Hickson"],
    "authors_uuid": ["c9528dbd8b11"],
    "tags_uuid": ["2e471af7f345", "7ea02d81a2d0"],
    "tags": ["estimating", "planning"]
  },
  {
    "body": "Well-designed components are easy to replace. Eventually, they will be replaced by ones that are not so easy to replace.",
    "uuid": "3cb9aed30f79",
    "publish_date": "2015-06-15 12:34:41",
    "authors": ["Sustrik's Law"],
    "authors_uuid": ["02ecac5f1f05"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Programmers are often angry because they’re often scared.",
    "uuid": "15795d2d7461",
    "publish_date": "2015-07-03 04:12:46",
    "authors": ["Paul Ford"],
    "authors_uuid": ["0fa8164035de"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "(...) Thinking this way will teach you two things about computers: One, there’s no magic, no matter how much it looks like there is. There’s just work to make things look like magic. And two, it’s crazy in there.",
    "uuid": "7779227f02fc",
    "publish_date": "2015-07-03 04:15:37",
    "authors": ["Paul Ford"],
    "authors_uuid": ["0fa8164035de"],
    "tags_uuid": ["b85badf703f2"],
    "tags": ["computers"]
  },
  {
    "body": "A Fallacy of Software: If it works, and we don't change anything, it will keep working.",
    "uuid": "486d7b07cec5",
    "publish_date": "2015-07-05 15:47:19",
    "authors": ["Jessica Kerr"],
    "authors_uuid": ["428812a60e95"],
    "tags_uuid": ["2806ae712337", "cfac42388f9d"],
    "tags": ["refactoring", "softwares"]
  },
  {
    "body": "Almost without exception, the best products are developed by teams with desire to solve a problem; not a company's need to fulfil a strategy.",
    "uuid": "2ce6816c577f",
    "publish_date": "2015-08-03 06:30:49",
    "authors": ["Jeff Weiner"],
    "authors_uuid": ["53a605479c46"],
    "tags_uuid": ["76af4d7121a0"],
    "tags": ["corporate"]
  },
  {
    "body": "The best error message is the one that never shows up.",
    "uuid": "375a0ac9e57b",
    "publish_date": "2015-08-31 15:41:27",
    "authors": ["Thomas Fuchs"],
    "authors_uuid": ["59ac05760791"],
    "tags_uuid": ["40016061a7d0"],
    "tags": ["error"]
  },
  {
    "body": "Telling a programmer there's already a library to do X is like telling a songwriter there's already a song about love.",
    "uuid": "4f9eef0a6be3",
    "publish_date": "2015-09-18 03:53:42",
    "authors": ["Pete Cordell"],
    "authors_uuid": ["c3d1e1c2b214"],
    "tags_uuid": ["cffa5ba93708"],
    "tags": ["reusing"]
  },
  {
    "body": "A programmer does not primarily write code; rather, he primarily writes to another programmer about his problem solution. The understanding of this fact is the final step in his maturation as technician.",
    "uuid": "6138712c7f91",
    "publish_date": "2015-09-21 02:09:05",
    "authors": ["anonymous"],
    "authors_uuid": ["87dd7c6d02a8"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "It can be better to copy a little code than to pull in a big library for one function.  Dependency hygiene trumps code reuse.",
    "uuid": "c79b5a54431c",
    "publish_date": "2015-10-02 08:16:10",
    "authors": ["Rob Pike"],
    "authors_uuid": ["569cfb601ec7"],
    "tags_uuid": ["cffa5ba93708"],
    "tags": ["reusing"]
  },
  {
    "body": "There's nothing more permanent than a temporary hack.",
    "uuid": "e69960948c0a",
    "publish_date": "2015-10-02 19:16:19",
    "authors": ["Kyle Simpson"],
    "authors_uuid": ["1a510e784b6a"],
    "tags_uuid": ["ffe7dc59094f", "66a29647736f"],
    "tags": ["maintenance", "hacking"]
  },
  {
    "body": "Like designers, if you give a programmer a problem with parameters, they’ll apply every bit of genius they have to solve it in the best possible way. If you tell them how to do it, you’ll suffer the wrath of an angry God.",
    "uuid": "ade82b8cff43",
    "publish_date": "2015-10-31 08:16:46",
    "authors": ["Derek Powazek"],
    "authors_uuid": ["9d8723deb1c7"],
    "tags_uuid": ["fc973eebe544", "b5cf00a461cc"],
    "tags": ["specification", "creativity"]
  },
  {
    "body": "Start out with finding the right problem to solve. This is a combination of “what customers are asking for”, “what customers don’t even know they want yet” and “what can be solved with something simple to understand and manage”",
    "uuid": "fded10ee743d",
    "publish_date": "2015-11-02 09:41:30",
    "authors": ["Radia Perlman"],
    "authors_uuid": ["fc76f6bb9c22"],
    "tags_uuid": ["fc973eebe544", "7ea02d81a2d0"],
    "tags": ["specification", "planning"]
  },
  {
    "body": "Teams are immutable. Every time someone leaves, or joins, you have a new team, not a changed team.",
    "uuid": "e172ed567769",
    "publish_date": "2015-11-10 17:19:00",
    "authors": ["Richard Dalton"],
    "authors_uuid": ["c8bbe4a47cc3"],
    "tags_uuid": ["ef72307d48c3"],
    "tags": ["teams"]
  },
  {
    "body": "Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.",
    "uuid": "ed6c96b8688e",
    "publish_date": "2015-11-21 11:26:01",
    "authors": ["Patrick McKenzie"],
    "authors_uuid": ["47c1f12a1071"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "That which optimizes one part of the system necessarily undermines the system as a whole.",
    "uuid": "056e012db22d",
    "publish_date": "2015-11-21 11:26:22",
    "authors": ["Eric Ries"],
    "authors_uuid": ["ed3a55c74b2e"],
    "tags_uuid": ["56c51ddb335c"],
    "tags": ["optimization"]
  },
  {
    "body": "Hardware eventually fails. Software eventually works.",
    "uuid": "d24ddfb1d2fe",
    "publish_date": "2015-11-24 02:31:34",
    "authors": ["Michael Hartung"],
    "authors_uuid": ["fb656032b750"],
    "tags_uuid": ["cfac42388f9d", "ee3f63e63e4d"],
    "tags": ["softwares", "hardware"]
  },
  {
    "body": "We crave for new sensations but soon become indifferent to them. Wonders of yesterday are today common occurrences.",
    "uuid": "a1629ea1e2f5",
    "publish_date": "2015-11-29 12:44:33",
    "authors": ["Nikola Tesla"],
    "authors_uuid": ["07aa74c718cc"],
    "tags_uuid": ["1c9cd4e9dc00", "a7b1d0526611"],
    "tags": ["innovation", "ideas"]
  },
  {
    "body": "I know testers who make good devs. I know devs who make good testers. I know Scrum Masters who make good coffee.",
    "uuid": "6ed675f666c9",
    "publish_date": "2015-12-03 02:27:23",
    "authors": ["David Evans"],
    "authors_uuid": ["c4501b6bd737"],
    "tags_uuid": ["ae64acaacfab"],
    "tags": ["scrum"]
  },
  {
    "body": "Go is the language JavaScript programmers retire to when they get old. Like the Florida of programming languages.",
    "uuid": "e8cbc93dbe41",
    "publish_date": "2015-12-05 16:23:27",
    "authors": ["Jed Schmidt"],
    "authors_uuid": ["4080a244c2bf"],
    "tags_uuid": ["acec50979a76", "15ddd6ce025e"],
    "tags": ["go", "javascript"]
  },
  {
    "body": "UNIX is simple. It just takes a genius to understand its simplicity.",
    "uuid": "eeaa6a217652",
    "publish_date": "2015-12-07 03:27:42",
    "authors": ["Dennis M. Ritchie"],
    "authors_uuid": ["547d0b1da532"],
    "tags_uuid": ["ba763cdd445a", "a21f9e95529b"],
    "tags": ["complexity", "unix"]
  },
  {
    "body": "An evolving system increases its complexity unless work is done to reduce it.",
    "uuid": "69d17c59dbb1",
    "publish_date": "2015-12-26 12:07:10",
    "authors": ["Meir Lehman"],
    "authors_uuid": ["3e5ad9a21aa8"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Almost every attempt at making something better will be regarded by someone else as a personal attack.",
    "uuid": "6a67c97890e0",
    "publish_date": "2015-12-28 07:34:54",
    "authors": ["Chris Sacca"],
    "authors_uuid": ["0c9ae13e781e"],
    "tags_uuid": ["37c8e96b9db0"],
    "tags": ["collaboration"]
  },
  {
    "body": "The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague.",
    "uuid": "73155277cbdb",
    "publish_date": "2016-02-24 02:30:12",
    "authors": ["E. W. Dijkstra"],
    "authors_uuid": ["4b869649e244"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Bad programmers worry about the code. Good programmers worry about data structures and their relationships.",
    "uuid": "f75f5dee011f",
    "publish_date": "2016-03-18 07:30:11",
    "authors": ["Linus Torvalds"],
    "authors_uuid": ["8491fd3f9c47"],
    "tags_uuid": ["65df1e9ae843", "16d05f8e5421"],
    "tags": ["data", "programmers"]
  },
  {
    "body": "90% of the functionality delivered now is better than 100% delivered never.",
    "uuid": "b47a7ced0a50",
    "publish_date": "2016-05-17 02:28:48",
    "authors": ["Brian W. Kernighan", "P. J. Plaugher"],
    "authors_uuid": ["0086884ef4b1", "e773f0e8944d"],
    "tags_uuid": ["974e5bc2686a", "7ea02d81a2d0", "df01cc3ecc20"],
    "tags": ["releasing", "planning", "productivity"]
  },
  {
    "body": "Software being &ldquo;Done&rdquo; is like lawn being &ldquo;Mowed&rdquo;.",
    "uuid": "a2f21fd89432",
    "publish_date": "2016-10-12 06:34:01",
    "authors": ["Jim Benson"],
    "authors_uuid": ["00d26e2417fb"],
    "tags_uuid": ["cfac42388f9d"],
    "tags": ["softwares"]
  },
  {
    "body": "Promoting a good developer to management is often a twofold bad move: you'll lose a good developer and get a poor manager.",
    "uuid": "fe202be7c152",
    "publish_date": "2016-10-13 08:17:57",
    "authors": ["Mario Fusco"],
    "authors_uuid": ["c8338b8ec3d1"],
    "tags_uuid": ["8f1778e044f7"],
    "tags": ["management"]
  },
  {
    "body": "Programmers have to fight against the two most destructive forces in the universe: entropy and stupidity.",
    "uuid": "2801314a603c",
    "publish_date": "2016-11-12 10:14:24",
    "authors": ["Damian Conway"],
    "authors_uuid": ["b0b00efcf6de"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "What one programmer can do in one month, two programmers can do in two months.",
    "uuid": "96838dfba830",
    "publish_date": "2017-04-07 08:15:34",
    "authors": ["Frederick P. Brooks"],
    "authors_uuid": ["583742cadc21"],
    "tags_uuid": ["16d05f8e5421", "df01cc3ecc20"],
    "tags": ["programmers", "productivity"]
  },
  {
    "body": "If you say &ldquo;I told you so&rdquo;, you are the one who has failed. Because you knew, but did not manage to stop the train wreck.",
    "uuid": "3f5c2fb98714",
    "publish_date": "2017-07-11 04:40:03",
    "authors": ["Robert C. Martin"],
    "authors_uuid": ["2332b0bec2ae"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "These days, the problem isn't how to innovate; it's how to get society to adopt the good ideas that already exist.",
    "uuid": "c9f58c58ff44",
    "publish_date": "2017-07-17 12:54:34",
    "authors": ["Douglas Engelbart"],
    "authors_uuid": ["035df902216d"],
    "tags_uuid": ["1c9cd4e9dc00", "a7b1d0526611"],
    "tags": ["innovation", "ideas"]
  },
  {
    "body": "In carpentry you measure twice and cut once. In software development you never measure and make cuts until you run out of time.",
    "uuid": "c7b40eb9dc48",
    "publish_date": "2017-10-17 02:45:17",
    "authors": ["Adam Morse"],
    "authors_uuid": ["4b67f6a86a19"],
    "tags_uuid": ["2e471af7f345", "46278bd60154", "7ea02d81a2d0"],
    "tags": ["estimating", "programming", "planning"]
  },
  {
    "body": "A good API is not just easy to use but also hard to misuse.",
    "uuid": "f1ec7b2ce219",
    "publish_date": "2017-10-17 04:14:56",
    "authors": ["JBD"],
    "authors_uuid": ["f5c71c172203"],
    "tags_uuid": ["deb8742bbbcf"],
    "tags": ["api"]
  },
  {
    "body": "The best way to get the right answer on the internet is not to ask a question; it's to post the wrong answer.",
    "uuid": "4413f2984cd3",
    "publish_date": "2017-10-24 11:54:28",
    "authors": ["Cunningham's Law"],
    "authors_uuid": ["019970521e3d"],
    "tags_uuid": ["16d05f8e5421"],
    "tags": ["programmers"]
  },
  {
    "body": "Programming is not easy like Sunday morning, it is silent poetry.",
    "uuid": "65a25a329466",
    "publish_date": "2017-11-18 18:31:05",
    "authors": ["Waseem Latif"],
    "authors_uuid": ["8f0ef5e53fd2"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Formal education will make you a living. Self-education will make you a fortune.",
    "uuid": "e9b2d2056e8d",
    "publish_date": "2018-02-19 19:56:30",
    "authors": ["Jim Rohn"],
    "authors_uuid": ["6e1824851454"],
    "tags_uuid": ["77d57a556c78"],
    "tags": ["education"]
  },
  {
    "body": "Code is like humor. When you have to explain it, it’s bad.",
    "uuid": "d34614db1b72",
    "publish_date": "2018-07-04 19:36:34",
    "authors": ["Cory House"],
    "authors_uuid": ["e8d337e9b56f"],
    "tags_uuid": ["ba763cdd445a"],
    "tags": ["complexity"]
  },
  {
    "body": "Terrible code is not a good excuse to be mean, because terrible code is not well-correlated with having been written by terrible people.",
    "uuid": "06096f8669ef",
    "publish_date": "2019-03-10 18:03:26",
    "authors": ["GeePaw Hill"],
    "authors_uuid": ["903a8239b348"],
    "tags_uuid": ["2806ae712337"],
    "tags": ["refactoring"]
  },
  {
    "body": "A computer is like a mischievous genie. It will give you exactly what you ask for, but not always what you want.",
    "uuid": "296fa82772bd",
    "publish_date": "2019-03-10 20:00:31",
    "authors": ["Joe Sondow"],
    "authors_uuid": ["7411d7116cac"],
    "tags_uuid": ["b85badf703f2"],
    "tags": ["computers"]
  },
  {
    "body": "Programming is just saying &ldquo;I have a meeting in an hour so better not start on this yet&rdquo; to yourself until you die.",
    "uuid": "92889379dfe6",
    "publish_date": "2019-03-10 20:08:33",
    "authors": ["Alex Engelberg"],
    "authors_uuid": ["d7fc1a317e86"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "body": "Once a new technology rolls over you, if you're not part of the steamroller you're part of the road.",
    "uuid": "e74fa05fabec",
    "publish_date": "2019-03-23 08:44:37",
    "authors": ["Stewart Brand"],
    "authors_uuid": ["9a77e12f15f0"],
    "tags_uuid": ["ec60c1ab00ec"],
    "tags": ["technology"]
  },
  {
    "body": "The amateur software engineer is always in search of magic.",
    "uuid": "653ab76358f8",
    "publish_date": "2019-03-28 20:36:17",
    "authors": ["Grady Booch"],
    "authors_uuid": ["64add21260b3"],
    "tags_uuid": ["46278bd60154"],
    "tags": ["programming"]
  },
  {
    "uuid": "buBL1RQdsTfUHrTLYVBLyN",
    "body": "Programming languages, like pizza, come in only two sizes: too big and too small.",
    "publish_date": "2019-10-17 20:17:37",
    "authors_uuid": ["94f163549a90"],
    "authors": ["Richard Pattis"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "uuid": "dS3Zi3TUtUnSdQGLbrZwhv",
    "body": "The only way to learn a new programming language is by writing programs in it.",
    "publish_date": "2019-10-17 20:20:42",
    "authors_uuid": ["547d0b1da532"],
    "authors": ["Dennis M. Ritchie"],
    "tags_uuid": ["2e662c7bed7a"],
    "tags": ["languages"]
  },
  {
    "uuid": "kN57JvAcyEF53cADmxMA8x",
    "body": "If it doesn’t work, it doesn’t matter how fast it doesn’t work.",
    "publish_date": "2019-10-17 21:00:03",
    "authors_uuid": ["6swBdXHizgLvaXSkGPeS2z"],
    "authors": ["Mich Ravera"],
    "tags_uuid": ["bd67f2b3cd5c", "ba763cdd445a"],
    "tags": ["bugs", "complexity"]
  },
  {
    "uuid": "svnGULLgSGDVs3PDF4Xzy2",
    "body": "Rarely is anyone thanked for the work they did to prevent the disaster that didn't happen.",
    "publish_date": "2019-10-17 21:02:29",
    "authors_uuid": ["sVFzHR7tnHboedeFomTAEb"],
    "authors": ["Mikko Hypponen"],
    "tags_uuid": ["90ce12eb53bb", "8XDhVLMam82MZgdTLfAwXs"],
    "tags": ["security", "quality"]
  },
  {
    "uuid": "jxmjxmqyXnxejtVnkgwGq1",
    "body": "Java is to JavaScript as ham is to hamster.",
    "publish_date": "2019-10-17 21:04:52",
    "authors_uuid": ["u4nAXhE72kNMyT83rYb2kt"],
    "authors": ["Jeremy Keith"],
    "tags_uuid": ["4cf901231140", "15ddd6ce025e"],
    "tags": ["java", "javascript"]
  },
  {
    "uuid": "g56YHqRC4QHrStutad9UcZ",
    "body": "I think it's very important to get more women into computing. My slogan is: Computing is too important to be left to men.",
    "publish_date": "2019-10-17 21:12:34",
    "authors_uuid": ["kuE5NJpZHXtF3awKeZXEGf"],
    "authors": ["Karen Spärck Jones"],
    "tags_uuid": ["covLwJo7ZbTWuJYVzsT8WS"],
    "tags": ["diversity"]
  },
  {
    "uuid": "rbwgiagVnzLL7u4MqpHo8t",
    "body": "A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want.",
    "publish_date": "2019-10-18 20:55:17",
    "authors_uuid": ["d3uQEVCfz7UX3LGTA93VgV"],
    "authors": ["Niklaus Wirth"],
    "tags_uuid": ["ba763cdd445a", "5984190a8f7f", "fdcfd016c9e7"],
    "tags": ["complexity", "features", "users"]
  },
  {
    "uuid": "3ZtqNyNSFmYyR65mk6Uuur",
    "body": "No one in the brief history of computing has ever written a piece of perfect software. It's unlikely that you'll be the first.",
    "publish_date": "2019-10-18 21:04:31",
    "authors_uuid": ["187171c0d7c4"],
    "authors": ["Andy Hunt"],
    "tags_uuid": ["bd67f2b3cd5c", "cfac42388f9d"],
    "tags": ["bugs", "softwares"]
  }
]
